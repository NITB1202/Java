/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package GUI;

import MyDesign.ScrollBar;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.awt.image.ImageProducer;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Random;

import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.aspose.pdf.internal.imaging.internal.bouncycastle.jcajce.provider.symmetric.AES.CBC;

import BUS.BookBUS;
import BUS.AuthorBUS;
import BUS.CategoryBUS;
import BUS.DetailSupplyCardBUS;
import BUS.PublisherBUS;
import BUS.SupplierBUS;
import BUS.SupplyCardBUS;
import BUS.WarehouseBUS;
import DAO.BookAuthorDAO;
import DAO.BookCategoryDAO;
import DAO.BookDAO;
import DAO.PublisherDAO;
import DTO.entities.Account;
import DTO.entities.Author;
import DTO.entities.Book;
import DTO.entities.Category;
import DTO.entities.Warehouse;
import DTO.entities.Publisher;
import DTO.entities.Staff;
import DTO.entities.Supplier;
import DTO.entities.Book1;
import DTO.entities.BookAuthor;
import DTO.entities.BookCategory;
import DTO.entities.SupplyCard;
import DTO.entities.SupplyCardDetail;
import javax.swing.GroupLayout.Alignment;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.LayoutStyle.ComponentPlacement;

import javax.swing.JTextField;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import MyDesign.MyButton;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;

import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.JButton;
import javax.swing.border.LineBorder;
import java.awt.event.KeyAdapter;
import MyDesign.MyTextField_Basic;

public class WareHouseImport_Dialog extends javax.swing.JDialog {

    /**
     * Creates new form WareHouseImport_Dialog
     */
	
		 
        
    public WareHouseImport_Dialog(java.awt.Frame parent, boolean modal) throws SQLException, IOException, ClassNotFoundException {
        super(parent, modal);
        setSize(1058, 844);
        
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		
		int x = ((int)screenSize.getWidth()- this.getWidth())/2;
		int y = ((int)screenSize.getHeight() - this.getHeight())/2;
		
		setLocation(x,y);
		
        try {
            this.pack();
            initComponents();
            spTable.setVerticalScrollBar(new ScrollBar());
            spTable.getVerticalScrollBar().setBackground(Color.WHITE);
            spTable.getViewport().setBackground(Color.WHITE);
            JPanel p = new JPanel();
            p.setBackground(Color.WHITE);
            spTable.setCorner(JScrollPane.UPPER_RIGHT_CORNER, p);
            
        } catch (IOException ex) {
            Logger.getLogger(WareHouseImport_Dialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(WareHouseImport_Dialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() throws SQLException, IOException, ClassNotFoundException{

        panelBorder_Statistic_Blue1 = new MyDesign.PanelBorder_Statistic_Blue();
        panelBorder_Basic1 = new MyDesign.PanelBorder_Basic();
        panelBorder2 = new JPanel();
        panelBorder2.setBackground(new Color(255, 255, 255));
        pnImageBook = new MyDesign.PanelBorder_Basic();
        pnImageBook.setBorder(new LineBorder(new Color(128, 128, 128)));
        lbImageBook = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnLuuThongTin = new MyDesign.MyButton();
        btnLuuThongTin.setColorOver(new Color(210, 223, 255));
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel8_1 = new javax.swing.JLabel();
        jLabel8_2 = new javax.swing.JLabel();
        txtISBN = new MyDesign.MyTextField_Basic();
        txtISBN.setForeground(new Color(0, 0, 0));
        txtISBN.setShadowColor(new Color(128, 128, 128));
        txtISBN.setEnabled(false);
        txtISBN.setEditable(false);
        txtSoLuong = new MyDesign.MyTextField_Basic();
        txtSoLuong.setForeground(new Color(0, 0, 0));
        txtSoLuong.addKeyListener(new KeyAdapter() {
        	@Override
        	public void keyReleased(KeyEvent e) {
        		handleInput(e.getKeyChar(),txtSoLuong);
        	}
        });
        author = new AuthorBUS();
        List<Author> authorList = author.getAllName();
        bB = new BookBUS();
        List<Book> bookList = bB.getAllName();
        cbSach = new javax.swing.JComboBox<>();
        cbEdition = new JComboBox();
        publisher = new PublisherBUS();
        final List<Publisher> publisherList = publisher.getAllName();
        category = new CategoryBUS();
        List<Category> categoryList = category.getAll();
        panelBorder1 = new JPanel();
        panelBorder1.setBackground(new Color(255, 255, 255));
        jLabel9 = new javax.swing.JLabel();
        spTable = new javax.swing.JScrollPane();
        tbSachDuocNhap = new MyDesign.MyTable();
        jLabel10 = new javax.swing.JLabel();
        jLabel10.setFont(new Font("SansSerif", Font.PLAIN, 12));
        supplyCard = new SupplyCardBUS();
        List<SupplyCard> supplyCardList = supplyCard.getAllName();
        List<Supplier> supplierList = spB.getAllName();
        cbNhaCungCap = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jLabel11.setFont(new Font("SansSerif", Font.PLAIN, 12));
        txtTongChi = new javax.swing.JLabel();
        btnXacNhan = new MyDesign.MyButton();
        jLabel3 = new javax.swing.JLabel();

        panelBorder2.setPreferredSize(new java.awt.Dimension(217, 327));

        pnImageBook.setPreferredSize(new java.awt.Dimension(137, 192));

        lbImageBook.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbImageBook.setIcon(null); // NOI18N
        lbImageBook.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
      


        ImageIcon webIcon =new javax.swing.ImageIcon(getClass().getResource("/Images/logo.png")); 
        setIconImage(webIcon.getImage());
        setTitle("Đơn nhập");
        
        javax.swing.GroupLayout pnImageBookLayout = new javax.swing.GroupLayout(pnImageBook);
        pnImageBookLayout.setHorizontalGroup(
        	pnImageBookLayout.createParallelGroup(Alignment.TRAILING)
        		.addComponent(lbImageBook, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
        );
        pnImageBookLayout.setVerticalGroup(
        	pnImageBookLayout.createParallelGroup(Alignment.TRAILING)
        		.addComponent(lbImageBook, GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
        );
        pnImageBook.setLayout(pnImageBookLayout);

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel2.setText("Số lượng");

        btnLuuThongTin.setForeground(new java.awt.Color(44, 137, 247));
        btnLuuThongTin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/action-save-white.png"))); // NOI18N
        btnLuuThongTin.setText("Lưu thông tin");
        btnLuuThongTin.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnLuuThongTin.setPreferredSize(new java.awt.Dimension(177, 36));

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel4.setText("Giá");

        jLabel5.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel5.setText("Thể loại");

        jLabel6.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel6.setText("NXB");

        jLabel7.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel7.setText("Tác giả");

        jLabel8.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel8.setText("Tên sách");
        
        cbSach.setBackground(new java.awt.Color(246, 250, 255));
        cbSach.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        for(Book item : bookList)
        {
        	cbSach.addItem(item.getName());
        }
        cbSach.setBorder(null);
        cbSach.setOpaque(true);
        cbSach.setSelectedIndex(-1);
        bookAuthorDao = new BookAuthorDAO(null); // Khởi tạo đối tượng BookAuthorDao
        bookCategoryDao = new BookCategoryDAO(null);
        publisherDao = new PublisherDAO(null);
        editionDao = new BookCategoryDAO(null);
        isbnDao = new BookDAO(null);
        cbSach.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(cbSach.getSelectedIndex() == -1) return;
				
				String selectedValue = String.valueOf(cbSach.getSelectedItem());
                if (selectedValue != null) {
					String img = null, isbn = null, edition = null, tacgia = null, theloai = null, nxb = null;
					
					try {
						img = supplyCard.getByImg(selectedValue);
						isbn = supplyCard.getByISBN(selectedValue);
						edition = supplyCard.getByEdition(selectedValue);
						tacgia = author.getByName(isbn);
						theloai = category.getByName(isbn);
						nxb = publisher.getByIDPubName(isbn);
						
                        List<String> authors = bookAuthorDao.getAuthorsForBook(selectedValue);
                        if(authors.size()>0)// Gọi phương thức từ BookAuthorDao
                        	txtTacGia.setText(authors.get(0));
                        else
                        	txtTacGia.setText(null);
                        
                       //Tự động điền thể loại
                        List<String> categories = bookCategoryDao.getCategoriesForBook(selectedValue);
                        if(categories.size()>0)// Gọi phương thức từ BookAuthorDao
                        	txtTheLoai.setText(categories.get(0));
                        else
                        	txtTheLoai.setText(null);
                       
                        //Tự động điền nhà xuất bản
                        List<String> publishers = publisherDao.getPublisherForBook(selectedValue);
                        if(publishers.size()>0)// Gọi phương thức từ BookAuthorDao
                        	txtNXB.setText(publishers.get(0));
                        else
                        	txtNXB.setText(null);
                     // Tự động điền phiên bản
                        List<String> editions = editionDao.getEditionsForBook(selectedValue);  // Gọi phương thức từ editionDao

                        // Khởi tạo một HashSet để lưu trữ các phiên bản đã được thêm vào JComboBox
                        HashSet<String> addedEditions = new HashSet<>();

                        // Khởi tạo DefaultComboBoxModel
                        DefaultComboBoxModel<String> editionModel = new DefaultComboBoxModel<>();

                        // Thêm các phiên bản vào JComboBox
                        for (String edition1 : editions) {
                            if (!addedEditions.contains(edition1)) {
                                editionModel.addElement(edition1);
                                addedEditions.add(edition1);
                            }
                        }

                        // Gán mô hình phiên bản mới cho JComboBox
                        cbEdition.setModel(editionModel);
                        
						
					} catch (SQLException e2) {
						// TODO Auto-generated catch block
						e2.printStackTrace();
					} catch (IOException e2) {
						// TODO Auto-generated catch block
						e2.printStackTrace();
					}
					
			    	ImageIcon image = new ImageIcon(WareHouseImport_Dialog.class.getResource(img));
					Image resizedImage = image.getImage();
					resizedImage = resizedImage.getScaledInstance(170, 190, Image.SCALE_SMOOTH);
					image = new ImageIcon(resizedImage);
					lbImageBook.setIcon(image);
					cbEdition.setSelectedIndex(-1);
					txtISBN.setText(null);
					txtGia.setText(null);
                }
			}
		});
        JTextField txtISBNList = new JTextField(20); // Độ dài 20 ký tự, bạn có thể điều chỉnh tùy ý
        cbEdition.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (cbEdition.getSelectedIndex()!=-1) {
                    try {
                    	String bookName = String.valueOf(cbSach.getSelectedItem());
                        // Loại bỏ dấu phân cách ở cuối và đặt giá trị vào JTextField
                        txtISBN.setText(isbnDao.getISBNForBook(bookName));
        				String selectedValue = String.valueOf(cbSach.getSelectedItem());
						String cost = String.valueOf(supplyCard.getByCost(selectedValue));
						txtGia.setText(cost);
                    } catch (SQLException ex) {
                        ex.printStackTrace();
                    } catch (IOException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
                }
            }
        });
        
     
        
        txtSoLuong.setBorder(new LineBorder(new Color(128, 128, 128)));
        txtSoLuong.setFont(new java.awt.Font("SansSerif", 1, 13));
        
        cbEdition.setBackground(new java.awt.Color(246, 250, 255));
        cbEdition.setFont(new java.awt.Font("SansSerif", 0, 14));
        cbEdition.setBorder(null);
        cbEdition.setOpaque(true);
        cbEdition.setPreferredSize(new java.awt.Dimension(77, 28));
        
        jLabel8_1.setText("Phiên bản");
        jLabel8_1.setFont(new Font("SansSerif", Font.BOLD, 13));
        
        jLabel8_2.setText("ISBN");
        jLabel8_2.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        
        txtISBN.setBorder(new LineBorder(new Color(128, 128, 128)));
        txtISBN.setFont(new java.awt.Font("SansSerif", 1, 13));  
      
        
        txtTheLoai = new MyDesign.MyTextField_Basic();
        txtTheLoai.setForeground(new Color(0, 0, 0));
        txtTheLoai.setEnabled(false);
        txtTheLoai.setEditable(false);
        txtTheLoai.setFont(new Font("SansSerif", Font.BOLD, 13));
        txtTheLoai.setBorder(new LineBorder(new Color(128, 128, 128)));
        txtTheLoai.setColumns(10);
        
        txtNXB = new MyDesign.MyTextField_Basic();
        txtNXB.setForeground(new Color(0, 0, 0));
        txtNXB.setEnabled(false);
        txtNXB.setEditable(false);
        txtNXB.setFont(new Font("SansSerif", Font.BOLD, 13));
        txtNXB.setBorder(new LineBorder(new Color(128, 128, 128)));
        
        txtTacGia = new MyDesign.MyTextField_Basic();
        txtTacGia.setForeground(new Color(0, 0, 0));
        txtTacGia.setEnabled(false);
        txtTacGia.setEditable(false);
        txtTacGia.setFont(new Font("SansSerif", Font.BOLD, 13));
        txtTacGia.setBorder(new LineBorder(new Color(128, 128, 128)));
        
        txtGia = new MyTextField_Basic();
        txtGia.setShadowColor(new Color(0, 0, 0));
        txtGia.setForeground(Color.BLACK);
        txtGia.setFont(new Font("SansSerif", Font.BOLD, 13));
        txtGia.setEnabled(false);
        txtGia.setEditable(false);
        txtGia.setColumns(10);
        txtGia.setBorder(new LineBorder(new Color(128, 128, 128)));
              
        
        javax.swing.GroupLayout panelBorder2Layout = new javax.swing.GroupLayout(panelBorder2);
        panelBorder2Layout.setHorizontalGroup(
        	panelBorder2Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(panelBorder2Layout.createSequentialGroup()
        			.addGroup(panelBorder2Layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(panelBorder2Layout.createSequentialGroup()
        					.addContainerGap()
        					.addGroup(panelBorder2Layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(panelBorder2Layout.createSequentialGroup()
        							.addComponent(jLabel8_2, GroupLayout.PREFERRED_SIZE, 56, GroupLayout.PREFERRED_SIZE)
        							.addGap(18)
        							.addComponent(pnImageBook, GroupLayout.PREFERRED_SIZE, 174, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.RELATED, 14, Short.MAX_VALUE))
        						.addGroup(panelBorder2Layout.createSequentialGroup()
        							.addGroup(panelBorder2Layout.createParallelGroup(Alignment.LEADING)
        								.addGroup(panelBorder2Layout.createSequentialGroup()
        									.addGroup(panelBorder2Layout.createParallelGroup(Alignment.LEADING)
        										.addComponent(jLabel2)
        										.addComponent(jLabel4)
        										.addComponent(jLabel5)
        										.addComponent(jLabel6)
        										.addComponent(jLabel8)
        										.addComponent(jLabel7))
        									.addGap(16))
        								.addGroup(panelBorder2Layout.createSequentialGroup()
        									.addComponent(jLabel8_1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        									.addGap(25)))
        							.addGroup(panelBorder2Layout.createParallelGroup(Alignment.LEADING)
        								.addComponent(txtTheLoai, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
        								.addComponent(txtNXB, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
        								.addComponent(txtTacGia, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
        								.addComponent(cbSach, Alignment.TRAILING, 0, 172, Short.MAX_VALUE)
        								.addComponent(txtSoLuong, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
        								.addGroup(Alignment.TRAILING, panelBorder2Layout.createSequentialGroup()
        									.addGroup(panelBorder2Layout.createParallelGroup(Alignment.TRAILING)
        										.addGroup(panelBorder2Layout.createSequentialGroup()
        											.addPreferredGap(ComponentPlacement.RELATED)
        											.addComponent(txtISBN, GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE))
        										.addComponent(cbEdition, 0, 172, Short.MAX_VALUE))
        									.addPreferredGap(ComponentPlacement.RELATED))
        								.addComponent(txtGia, GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE))))
        					.addGap(37))
        				.addGroup(panelBorder2Layout.createSequentialGroup()
        					.addGap(25)
        					.addComponent(btnLuuThongTin, GroupLayout.PREFERRED_SIZE, 274, GroupLayout.PREFERRED_SIZE)))
        			.addContainerGap())
        );
        panelBorder2Layout.setVerticalGroup(
        	panelBorder2Layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(panelBorder2Layout.createSequentialGroup()
        			.addGap(14)
        			.addComponent(pnImageBook, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addGap(18)
        			.addGroup(panelBorder2Layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(panelBorder2Layout.createSequentialGroup()
        					.addGap(18)
        					.addGroup(panelBorder2Layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(jLabel8_2, GroupLayout.PREFERRED_SIZE, 18, GroupLayout.PREFERRED_SIZE)
        						.addComponent(txtISBN, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE))
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addGroup(panelBorder2Layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(jLabel8_1)
        						.addComponent(cbEdition, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
        				.addGroup(panelBorder2Layout.createSequentialGroup()
        					.addGap(102)
        					.addGroup(panelBorder2Layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(jLabel8)
        						.addComponent(cbSach, GroupLayout.PREFERRED_SIZE, 29, GroupLayout.PREFERRED_SIZE))))
        			.addPreferredGap(ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
        			.addGroup(panelBorder2Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel6)
        				.addComponent(txtNXB, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE))
        			.addGap(19)
        			.addGroup(panelBorder2Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel5)
        				.addComponent(txtTheLoai, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE))
        			.addGap(13)
        			.addGroup(panelBorder2Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel4)
        				.addComponent(txtGia, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE))
        			.addGap(18)
        			.addGroup(panelBorder2Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(txtSoLuong, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jLabel2))
        			.addGap(47)
        			.addComponent(btnLuuThongTin, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addGap(30))
        		.addGroup(panelBorder2Layout.createSequentialGroup()
        			.addContainerGap(370, Short.MAX_VALUE)
        			.addGroup(panelBorder2Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel7)
        				.addComponent(txtTacGia, GroupLayout.PREFERRED_SIZE, 29, GroupLayout.PREFERRED_SIZE))
        			.addGap(289))
        );
        panelBorder2.setLayout(panelBorder2Layout);

        jLabel9.setFont(new Font("SansSerif", Font.BOLD, 20)); // NOI18N
        jLabel9.setForeground(new Color(0, 0, 0));
        jLabel9.setText("Sách được nhập");

        spTable.setBorder(new LineBorder(new Color(128, 128, 128)));
        tbSachDuocNhap.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "ISBN", "Tên sách", "Tác giả", "Tái Bản", "NXB", "Thể loại", "Giá", "Số lượng"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spTable.setViewportView(tbSachDuocNhap);
        
        //ACTION LƯU THÔNG TIN VÀ KIỂM TRA TEXT SỐ LƯỢNG
        
        btnLuuThongTin.addActionListener(new ActionListener() {
			
			@Override
			
			public void actionPerformed(ActionEvent e) 
			{
	            DecimalFormat decimalFormat = new DecimalFormat("#,###");
				int selected = tbSachDuocNhap.getSelectedRow();
				if(selected >= 0)
				{
					//Handle sua va xoa
					int giaCu = Integer.parseInt(tbSachDuocNhap.getValueAt(selected, 7).toString());
					int slCu = Integer.parseInt(tbSachDuocNhap.getValueAt(selected, 8).toString());
					
					int giaMoi = Integer.parseInt(txtGia.getText());
					int slMoi = Integer.parseInt(txtSoLuong.getText());
					
					//Kiem tra gia tri moi
					if(giaMoi < 19000)
					{
						JOptionPane.showMessageDialog(null, "Giá mới không hợp lệ. Vui lòng thử lại.","Lỗi",JOptionPane.ERROR_MESSAGE);
						return;
					}
					
					tongchi -= slCu*giaCu;
					
					if(slMoi == 0)
					{
			            txtTongChi.setText(String.valueOf(decimalFormat.format(tongchi)));
			            tbSachDuocNhap.getModel();
			            DefaultTableModel model = (DefaultTableModel)tbSachDuocNhap.getModel();
			            model.removeRow(selected);
			            for(int i = 0; i < model.getRowCount();i++)
			            	tbSachDuocNhap.setValueAt(i+1, i, 0);
			            
						JOptionPane.showMessageDialog(null, "Xóa sách khỏi đơn nhập thành công.","Thông báo",JOptionPane.INFORMATION_MESSAGE);
					}
					else
					{
						tongchi +=slMoi*giaMoi;
			            txtTongChi.setText(String.valueOf(decimalFormat.format(tongchi)));
						tbSachDuocNhap.setValueAt(giaMoi, selected, 7);
						tbSachDuocNhap.setValueAt(slMoi, selected, 8);
						tbSachDuocNhap.setValueAt(txtISBN.getText(), selected, 1);
						JOptionPane.showMessageDialog(null, "Cập nhật sách thành công.","Thông báo",JOptionPane.INFORMATION_MESSAGE);
					}
				}
				else
				{	
				
				    // TODO: Kiểm tra các trường nhập liệu trước khi thêm vào bảng
				    gia = txtGia.getText();
				    soluong = txtSoLuong.getText();
				    isbn = txtISBN.getText();
	
				    if ( isComboBoxEmpty(cbSach) || isTextFieldEmpty(txtGia) || isTextFieldEmpty(txtSoLuong) || isComboBoxEmpty(cbNhaCungCap)||isComboBoxEmpty(cbEdition)) {
				        JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Vui lòng kiểm tra đầy đủ thông tin.", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
				        return;
				    } 
				        // Kiểm tra số lượng > 0
				    if (Integer.parseInt(soluong) <= 0) {
				            JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Số lượng phải lớn hơn 0.", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
				            return;
				    } 
				        // Kiểm tra giá > 19000
				    if (Integer.parseInt(gia) <= 19000) {
				            JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Giá phải lớn hơn 19000.", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
				            return;
				    } 
				        // Nếu các điều kiện đều đúng, thêm dữ liệu vào bảng
				        	DefaultTableModel model = (DefaultTableModel) tbSachDuocNhap.getModel();
				            tensach = String.valueOf(cbSach.getSelectedItem());
				            tgia = txtTacGia.getText();
				            edition = String.valueOf(cbEdition.getSelectedItem());
				            nxb = txtNXB.getText();
				            theloai = txtTheLoai.getText();
				            Object[] rowData = {model.getRowCount() + 1, isbn, tensach, tgia, edition, nxb, theloai, gia, soluong};
				            model.addRow(rowData);
				            tongchi = tongchi + (Integer.parseInt(gia) * Integer.parseInt(soluong));
				            tongsoluong = tongsoluong + (Integer.parseInt(soluong));
				            txtTongChi.setText(String.valueOf(decimalFormat.format(tongchi)));
				}
				
			    tbSachDuocNhap.clearSelection();
	            lbImageBook.setIcon(null);
	            txtISBN.setText(null);
	            txtGia.setText(null);
	            txtSoLuong.setText(null);
	            txtTacGia.setText(null);
	            txtNXB.setText(null);
	            txtTheLoai.setText(null);
	            cbSach.setSelectedIndex(-1);
	            cbEdition.setSelectedIndex(-1);
	            cbSach.setEnabled(true);
	            cbEdition.setEnabled(true);
			}
        });
        
        
        tbSachDuocNhap.addMouseListener(new MouseAdapter() {
        	public void mouseClicked(MouseEvent e)
        	{
    			DefaultTableModel model = (DefaultTableModel) tbSachDuocNhap.getModel();
    			int seclectedRow = tbSachDuocNhap.getSelectedRow();
    			if(seclectedRow >= 0)
    			{
    				Object isbn = tbSachDuocNhap.getValueAt(seclectedRow, 1).toString();
    				Object sach = tbSachDuocNhap.getValueAt(seclectedRow, 2);
    				Object tg = tbSachDuocNhap.getValueAt(seclectedRow, 3);
    				Object ed = tbSachDuocNhap.getValueAt(seclectedRow, 4).toString();
    				Object nhaxuatban = tbSachDuocNhap.getValueAt(seclectedRow, 5);
    				Object tl = tbSachDuocNhap.getValueAt(seclectedRow, 6);
    				Object g = tbSachDuocNhap.getValueAt(seclectedRow, 7).toString();
    				Object sl = tbSachDuocNhap.getValueAt(seclectedRow, 8).toString();
    				if(sach!=null && tg!=null && nhaxuatban!=null && tl!=null && g!=null && sl!=null)
    				{      					
			            txtGia.setText(String.valueOf(g));
			            txtSoLuong.setText(String.valueOf(sl));
    					txtISBN.setText(String.valueOf(isbn));
    					
    					cbSach.setSelectedItem(sach);
    					cbSach.setEnabled(false);
    					cbEdition.setSelectedItem(ed);
    					cbEdition.setEnabled(false);
    					txtTacGia.setText(tg.toString());
    					txtTheLoai.setText(tl.toString());
    					txtNXB.setText(nhaxuatban.toString());
    					
    						String img;
							try {
								img = supplyCard.getByImg(String.valueOf(sach));
								File imageFile = new File(img);
								if (imageFile.exists() && imageFile.canRead()) {
									try {
										BufferedImage imagebook = ImageIO.read(imageFile);
										if (imagebook != null) {
											int newWidth = 190;
											int newHeight = 190;
							
											// Tạo ảnh mới với kích thước đã chỉ định
											Image resizedImage = imagebook.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
											BufferedImage bufferedResizedImage = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_INT_RGB);
											bufferedResizedImage.getGraphics().drawImage(resizedImage, 0, 0, null);
							
											// Gán ảnh đã thay đổi kích thước vào JLabel
											lbImageBook.setIcon(new javax.swing.ImageIcon(bufferedResizedImage));
										}
									} catch (IOException e1) {
										JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Không thể đọc tệp ảnh.", "Lỗi", JOptionPane.ERROR_MESSAGE);
									}
								}
							} catch (Exception ex) {
								ex.printStackTrace();
							}
    				}
    			}
        	}
		});
        
        javax.swing.GroupLayout panelBorder1Layout = new javax.swing.GroupLayout(panelBorder1);
        panelBorder1Layout.setHorizontalGroup(
        	panelBorder1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(panelBorder1Layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(panelBorder1Layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(spTable, GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
        				.addComponent(jLabel9))
        			.addContainerGap())
        );
        panelBorder1Layout.setVerticalGroup(
        	panelBorder1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(panelBorder1Layout.createSequentialGroup()
        			.addGap(18)
        			.addComponent(jLabel9)
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addComponent(spTable, GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
        			.addContainerGap())
        );
        panelBorder1.setLayout(panelBorder1Layout);

        jLabel10.setForeground(new java.awt.Color(51, 51, 51));
        jLabel10.setText("Nhà cung cấp");

        cbNhaCungCap.setBackground(new java.awt.Color(246, 250, 255));
        cbNhaCungCap.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
//        cbNhaCungCap.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nhà cung cấp" }));
        for(Supplier item : supplierList)
        {
        	cbNhaCungCap.addItem(item.getSupplier_name());
        }
        cbNhaCungCap.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(229, 229, 229)));
        cbNhaCungCap.setOpaque(true);
        cbNhaCungCap.setPreferredSize(new java.awt.Dimension(77, 28));
        cbNhaCungCap.setSelectedIndex(-1);
        
        jLabel11.setForeground(new java.awt.Color(51, 51, 51));
        jLabel11.setText("Tổng chi");

        txtTongChi.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        txtTongChi.setText("0đ");

        btnXacNhan.setBackground(new java.awt.Color(22, 113, 221));
        btnXacNhan.setForeground(new java.awt.Color(255, 255, 255));
        btnXacNhan.setText("Xác nhận");
        btnXacNhan.setBorderColor(new java.awt.Color(22, 113, 221));
        btnXacNhan.setColor(new java.awt.Color(22, 113, 221));
        btnXacNhan.setFont(new Font("SansSerif", Font.BOLD, 18)); // NOI18N
        
        btnXacNhan.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				    // LƯU DỮ LIỆU VÀO DATABASE
		            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		            Date currentDate = new Date();
		            Timestamp timestamp = new Timestamp(currentDate.getTime());
		            
		            // KHỞI TẠO ĐỐI TƯỢNG
		            Book1 sach = new Book1();
		            Warehouse k = new Warehouse();
		            SupplyCardDetail d = new SupplyCardDetail();
		            BookAuthor ba = new BookAuthor();
		            BookCategory bc = new BookCategory();
		            Supplier sp = new Supplier();
		            
		            // TẠO 1 PHIẾU SUPPLYCARD
					ncc = cbNhaCungCap.getSelectedItem().toString();
					try {
						providerID = spB.getBySupplierID(ncc);
					} catch (SQLException | IOException e2) {
						// TODO Auto-generated catch block
						e2.printStackTrace();
					}
		            SupplyCard s = new SupplyCard();
	                s.setSupDate(timestamp);
	                s.setProvider(providerID);
	                s.setTongchi(tongchi);
                    try {
                        scB.saveSC(s);
                    } catch (SQLException | IOException e1) {
                        
                    }
	                
		            
	                int bookID,bookID2, scID, pubID,idBook, authorID, categoryID;
	                
				    try {
						for (int i = 0; i < tbSachDuocNhap.getRowCount(); i++) {
						    isbn = tbSachDuocNhap.getValueAt(i, 1).toString();
						    tensach = tbSachDuocNhap.getValueAt(i, 2).toString();
						    tgia = tbSachDuocNhap.getValueAt(i, 3).toString();
						    edition = tbSachDuocNhap.getValueAt(i, 4).toString();
						    nxb = tbSachDuocNhap.getValueAt(i, 5).toString();
						    theloai = tbSachDuocNhap.getValueAt(i, 6).toString();
						    gia = tbSachDuocNhap.getValueAt(i, 7).toString();
						    soluong = tbSachDuocNhap.getValueAt(i, 8).toString();
						    bookID = supplyCard.getByNameBook(tensach);
						    idBook = supplyCard.getByIDBook();
						    scID = supplyCard.getByID();
						    pubID = supplyCard.getByPublisherID(nxb);
						    authorID = author.getByAuthorID(tgia);
						    categoryID = category.getByCategoryID(theloai);
						    if (bookID == 0) {
						      // TRƯỜNG HỢP SÁCH MỚI
						    	
						      	//Thêm vào cp_book
						      k.setIsbn(isbn);
						      k.setBookID(idBook);
						      k.setStoreNum(Integer.parseInt(soluong));
						      k.setEdition(edition);
						      k.setPublisherID(pubID);
						      k.setCost(Long.parseLong(gia));
						      k.setImg(String.valueOf(tbSachDuocNhap.getValueAt(i, 9).toString()));
						      cB.savecpB(k);
						      	
						      	//Thêm vào Chi Tiết Đơn Nhập
					          d.setScID(scID);
						      d.setISBN(isbn);
						      d.setNum(Integer.parseInt(soluong));
						      dscB.saveDSC(d);
						      	
						      	//Thêm vào Book_Author
						      ba.setAuthorID(authorID);
						      ba.setISBN(isbn);
						      author.saveBookAuthor(ba);
						      
						      	//Thêm vào Book_Category
						      bc.setCategoryID(categoryID);
						      bc.setISBN(isbn);
						      category.saveBookCategory(bc);
						      
						    } else {
						      // TRƯỜNG HỢP SÁCH CŨ
						      k.setStoreNum(Integer.parseInt(soluong));
						      k.setEdition(edition);
						      k.setPublisherID(pubID);
						      k.setCost(Long.parseLong(gia));
						      k.setIsbn(isbn);
						      cB.saveOldBook(k);

						      d.setScID(scID);
						      d.setISBN(isbn);
						      d.setNum(Integer.parseInt(soluong));
						      dscB.saveDSC(d);

						      }
						  }
					    JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Thêm dữ liệu thành công.", "Thông Báo", JOptionPane.INFORMATION_MESSAGE);
					    tbSachDuocNhap.setRowCount(0);
					    tongchi = 0;
					    txtTongChi.setText(tongchi+"đ");
					    txtTacGia.setText(null);
					    txtTheLoai.setText(null);;
					    cbEdition.removeAllItems();
					    txtGia.setText("");
						txtSoLuong.setText("");
						txtISBN.setText("");
					} catch (ClassNotFoundException | SQLException | IOException | NumberFormatException e1) {
						 boolean hasEmpty = hasEmptyCell(tbSachDuocNhap);
						 if(hasEmpty)
						 {
							 JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Bảng trống! Không thể thêm dữ liệu.", "Thông Báo", JOptionPane.ERROR_MESSAGE);
						 }else {
							 JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Thêm dữ liệu thất bại.", "Thông Báo", JOptionPane.ERROR_MESSAGE);
					         System.out.println(e1);
						 }
					}
				}
//			}
		});
        
        javax.swing.GroupLayout panelBorder_Basic1Layout = new javax.swing.GroupLayout(panelBorder_Basic1);
        panelBorder_Basic1Layout.setHorizontalGroup(
        	panelBorder_Basic1Layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(panelBorder_Basic1Layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(panelBorder2, GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addGroup(panelBorder_Basic1Layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(panelBorder1, GroupLayout.PREFERRED_SIZE, 640, GroupLayout.PREFERRED_SIZE)
        				.addGroup(panelBorder_Basic1Layout.createParallelGroup(Alignment.TRAILING)
        					.addGroup(panelBorder_Basic1Layout.createSequentialGroup()
        						.addComponent(jLabel10)
        						.addGap(586))
        					.addGroup(Alignment.LEADING, panelBorder_Basic1Layout.createSequentialGroup()
        						.addGroup(panelBorder_Basic1Layout.createParallelGroup(Alignment.LEADING)
        							.addComponent(txtTongChi)
        							.addComponent(jLabel11))
        						.addGap(453)
        						.addComponent(btnXacNhan, GroupLayout.PREFERRED_SIZE, 132, GroupLayout.PREFERRED_SIZE)))
        				.addComponent(cbNhaCungCap, GroupLayout.PREFERRED_SIZE, 198, GroupLayout.PREFERRED_SIZE))
        			.addGap(44))
        );
        panelBorder_Basic1Layout.setVerticalGroup(
        	panelBorder_Basic1Layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(panelBorder_Basic1Layout.createSequentialGroup()
        			.addGap(20)
        			.addGroup(panelBorder_Basic1Layout.createParallelGroup(Alignment.TRAILING)
        				.addComponent(panelBorder2, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 688, Short.MAX_VALUE)
        				.addGroup(panelBorder_Basic1Layout.createSequentialGroup()
        					.addComponent(panelBorder1, GroupLayout.PREFERRED_SIZE, 545, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
        					.addComponent(jLabel10)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(cbNhaCungCap, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        					.addGap(23)
        					.addGroup(panelBorder_Basic1Layout.createParallelGroup(Alignment.TRAILING)
        						.addGroup(panelBorder_Basic1Layout.createSequentialGroup()
        							.addComponent(jLabel11)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(txtTongChi, GroupLayout.PREFERRED_SIZE, 29, GroupLayout.PREFERRED_SIZE))
        						.addComponent(btnXacNhan, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        			.addGap(31))
        );
        panelBorder_Basic1.setLayout(panelBorder_Basic1Layout);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/warehouse-white.png"))); // NOI18N
        jLabel3.setText("Đơn nhập");

        javax.swing.GroupLayout panelBorder_Statistic_Blue1Layout = new javax.swing.GroupLayout(panelBorder_Statistic_Blue1);
        panelBorder_Statistic_Blue1Layout.setHorizontalGroup(
        	panelBorder_Statistic_Blue1Layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(panelBorder_Statistic_Blue1Layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(panelBorder_Statistic_Blue1Layout.createParallelGroup(Alignment.TRAILING)
        				.addComponent(panelBorder_Basic1, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 1009, Short.MAX_VALUE)
        				.addComponent(jLabel3, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 1009, Short.MAX_VALUE))
        			.addContainerGap())
        );
        panelBorder_Statistic_Blue1Layout.setVerticalGroup(
        	panelBorder_Statistic_Blue1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(panelBorder_Statistic_Blue1Layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(jLabel3, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(panelBorder_Basic1, GroupLayout.PREFERRED_SIZE, 621, Short.MAX_VALUE)
        			.addContainerGap())
        );
        panelBorder_Statistic_Blue1.setLayout(panelBorder_Statistic_Blue1Layout);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addComponent(panelBorder_Statistic_Blue1, GroupLayout.DEFAULT_SIZE, 1029, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addComponent(panelBorder_Statistic_Blue1, GroupLayout.DEFAULT_SIZE, 805, Short.MAX_VALUE)
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //Actions
    public static boolean isNumeric(String str) {
        return str.matches("-?\\d+(\\.\\d+)?");
    }
    public static boolean isAlpha(String str) {
        return str.matches("[a-zA-Z]+");
    }
    public boolean isTextFieldEmpty(JTextField textField) {
        return textField.getText().trim().isEmpty();
    }
    private boolean isComboBoxEmpty(JComboBox<?> comboBox) {
        return comboBox.getSelectedItem() == null;
    }

    public static boolean hasEmptyCell(JTable table) {
    	DefaultTableModel model = (DefaultTableModel) table.getModel();
        int rowCount = model.getRowCount();
        int colCount = model.getColumnCount();

        // Kiểm tra số lượng dòng và cột trong bảng
        if (rowCount == 0 || colCount == 0) {
            return true; // Nếu bảng không có dữ liệu, coi như bảng trống
        }

        // Duyệt qua từng ô trong bảng
        for (int row = 0; row < rowCount; row++) {
            for (int col = 0; col < colCount; col++) {
                Object value = model.getValueAt(row, col);
                if (value != null && !value.toString().isEmpty()) {
                    // Nếu có một ô có giá trị, coi như bảng không trống
                    return false;
                }
            }
        }

        // Nếu không tìm thấy ô có giá trị, coi như bảng trống
        return true;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WareHouseImport_Dialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WareHouseImport_Dialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WareHouseImport_Dialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WareHouseImport_Dialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        //</editor-fold>
        
        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    WareHouseImport_Dialog dialog = new WareHouseImport_Dialog(new javax.swing.JFrame(), true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                            System.exit(0);
                        }
                    });
                    dialog.setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(WareHouseImport_Dialog.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(WareHouseImport_Dialog.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(WareHouseImport_Dialog.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
	protected void handleInput(char c, JTextField textField_num ) 
	{
    	String str = textField_num.getText();
    	
        if (!Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE && c != KeyEvent.VK_DELETE)
        {
        	String replaceStr = str.substring(0,str.length()-1);
        	textField_num.setText(replaceStr);
        }
        else
        {
        	if(textField_num.getText().isBlank()) 
        		textField_num.setText("0");
        	else
        		textField_num.setText(String.valueOf(Integer.parseInt(textField_num.getText())));
        }
	}
    
    // Variables declaration - do not modify                     
    private MyDesign.MyButton btnLuuThongTin;
    private List<String> valueList;
    protected MyDesign.MyButton btnXacNhan;
    protected javax.swing.JComboBox<String> cbNhaCungCap;
    protected javax.swing.JComboBox<String> cbSach;
    protected javax.swing.JComboBox<String> cbEdition;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel8_1;
    private javax.swing.JLabel jLabel8_2;
    private javax.swing.JLabel jLabel9;
    protected javax.swing.JLabel lbImageBook;
    protected javax.swing.JLabel lbThemSach;
    private JPanel panelBorder1;
    private JPanel panelBorder2;
    private MyDesign.PanelBorder_Basic panelBorder_Basic1;
    private MyDesign.PanelBorder_Statistic_Blue panelBorder_Statistic_Blue1;
    private MyDesign.PanelBorder_Basic pnImageBook;
    private javax.swing.JScrollPane spTable;
    private MyDesign.MyTable tbSachDuocNhap;
    private BookAuthorDAO bookAuthorDao;
    private BookCategoryDAO bookCategoryDao;
    private PublisherDAO publisherDao;
    private BookCategoryDAO editionDao;
    private BookDAO isbnDao;
    protected MyDesign.MyTextField_Basic txtSoLuong;
    private javax.swing.JLabel txtTongChi;
    protected AuthorBUS author;
    private PublisherBUS publisher;
    protected CategoryBUS category;
    protected SupplyCardBUS supplyCard;
    protected DetailSupplyCardBUS detailSC;
    protected WarehouseBUS cpBook;
    protected long tongchi = 0;
    protected int tongsoluong =0;
    protected int providerID = 0;
    protected String gia, soluong;
    private String[] rowdata;
    protected String tensach;
    protected String tgia, nxb, ncc, theloai, edition, isbn, anh;
    protected Icon img;
    private Date supDate;
    protected MyDesign.MyTextField_Basic txtISBN;
    protected WarehouseBUS cB = new WarehouseBUS();
    protected SupplyCardBUS scB = new SupplyCardBUS() ;
    protected DetailSupplyCardBUS dscB = new DetailSupplyCardBUS() ;
    protected BookBUS bB = new BookBUS();
    protected SupplierBUS spB = new SupplierBUS();
    protected WareHouseScanner_Dialog whs;
    private MyDesign.MyTextField_Basic txtTheLoai;
    private MyDesign.MyTextField_Basic txtNXB;
    private MyDesign.MyTextField_Basic txtTacGia;
    private MyTextField_Basic txtGia;
}
