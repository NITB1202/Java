/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package GUI;

import MyDesign.ScrollBar;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.awt.image.ImageProducer;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Random;

import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.aspose.pdf.internal.imaging.internal.bouncycastle.jcajce.provider.symmetric.AES.CBC;

import BUS.BookBUS;
import BUS.AuthorBUS;
import BUS.CategoryBUS;
import BUS.DetailSupplyCardBUS;
import BUS.PublisherBUS;
import BUS.SupplierBUS;
import BUS.SupplyCardBUS;
import BUS.WarehouseBUS;
import DAO.BookAuthorDAO;
import DAO.BookCategoryDAO;
import DAO.BookDAO;
import DAO.PublisherDAO;
import DTO.entities.Account;
import DTO.entities.Author;
import DTO.entities.Book;
import DTO.entities.Category;
import DTO.entities.Warehouse;
import DTO.entities.Publisher;
import DTO.entities.Staff;
import DTO.entities.Supplier;
import DTO.entities.Book1;
import DTO.entities.BookAuthor;
import DTO.entities.BookCategory;
import DTO.entities.SupplyCard;
import DTO.entities.SupplyCardDetail;
import javax.swing.GroupLayout.Alignment;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.LayoutStyle.ComponentPlacement;

import javax.swing.JTextField;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import MyDesign.MyButton;
import java.awt.Font;
import java.awt.Image;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.JButton;

/**
 *
 * @author QUANG DIEN
 */
public class WareHouseImportDialogg extends javax.swing.JDialog {

    /**
     * Creates new form WareHouseImport_Dialog
     */
	
		 
        
    public WareHouseImportDialogg(java.awt.Frame parent, boolean modal) throws SQLException, IOException, ClassNotFoundException {
        super(parent, modal);
        try {
            this.pack();
            initComponents();
            spTable.setVerticalScrollBar(new ScrollBar());
            spTable.getVerticalScrollBar().setBackground(Color.WHITE);
            spTable.getViewport().setBackground(Color.WHITE);
            JPanel p = new JPanel();
            p.setBackground(Color.WHITE);
            spTable.setCorner(JScrollPane.UPPER_RIGHT_CORNER, p);
            
        } catch (IOException ex) {
            Logger.getLogger(WareHouseImportDialogg.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(WareHouseImportDialogg.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() throws SQLException, IOException, ClassNotFoundException{

        panelBorder_Statistic_Blue1 = new MyDesign.PanelBorder_Statistic_Blue();
        panelBorder_Basic1 = new MyDesign.PanelBorder_Basic();
        panelBorder2 = new MyDesign.PanelBorder();
        pnImageBook = new MyDesign.PanelBorder_Basic();
        lbImageBook = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnLuuThongTin = new MyDesign.MyButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel8_1 = new javax.swing.JLabel();
        jLabel8_2 = new javax.swing.JLabel();
        txtISBN = new MyDesign.MyTextField_Basic();
        txtISBN.setEnabled(false);
        txtISBN.setEditable(false);
        txtGia = new MyDesign.MyTextField_Basic();
        txtSoLuong = new MyDesign.MyTextField_Basic();
        author = new AuthorBUS();
        List<Author> authorList = author.getAllName();
        cbTacGia = new javax.swing.JComboBox<>();
        lbThemTacGia = new javax.swing.JLabel();
        bB = new BookBUS();
        List<Book> bookList = bB.getAllName();
        cbSach = new javax.swing.JComboBox<>();
        cbEdition = new JComboBox();
        publisher = new PublisherBUS();
        final List<Publisher> publisherList = publisher.getAllName();
        cbNXB = new javax.swing.JComboBox<>();
        lbThemNXB = new javax.swing.JLabel();
        category = new CategoryBUS();
        List<Category> categoryList = category.getAll();
        cbTheLoai = new javax.swing.JComboBox<>();
        lbThemTheLoai = new javax.swing.JLabel();
        panelBorder1 = new MyDesign.PanelBorder();
        jLabel9 = new javax.swing.JLabel();
        spTable = new javax.swing.JScrollPane();
        tbSachDuocNhap = new MyDesign.MyTable();
        jLabel10 = new javax.swing.JLabel();
        supplyCard = new SupplyCardBUS();
        List<SupplyCard> supplyCardList = supplyCard.getAllName();
        List<Supplier> supplierList = spB.getAllName();
        cbNhaCungCap = new javax.swing.JComboBox<>();
        lbThemNhaCungCap = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtTongChi = new javax.swing.JLabel();
        btnXacNhan = new MyDesign.MyButton();
        jLabel3 = new javax.swing.JLabel();

        panelBorder2.setPreferredSize(new java.awt.Dimension(217, 327));

        pnImageBook.setPreferredSize(new java.awt.Dimension(137, 192));

        lbImageBook.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbImageBook.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/AddImage.png"))); // NOI18N
        lbImageBook.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        
        lbImageBook.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setDialogTitle("Chọn tệp ảnh .png, .jpg");
                FileNameExtensionFilter filter = new FileNameExtensionFilter("Tệp ảnh .png, .jpg", "png", "jpg");
                fileChooser.setFileFilter(filter);

                int result = fileChooser.showOpenDialog(null);
                if (result == JFileChooser.APPROVE_OPTION) {
                    File selectedImageFile = fileChooser.getSelectedFile();
                    anh = selectedImageFile.getAbsolutePath(); // Lấy đường dẫn tệp ảnh

                    try {
                        BufferedImage image = ImageIO.read(selectedImageFile);

                        if (image != null) {
                            int newWidth = 190;
                            int newHeight = 190;

                            // Thay đổi kích thước ảnh
                            Image resizedImage = image.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
                            BufferedImage bufferedResizedImage = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_INT_RGB);
                            bufferedResizedImage.getGraphics().drawImage(resizedImage, 0, 0, null);

                            // Hiển thị ảnh thay đổi kích thước trong JLabel
                            lbImageBook.setIcon(new javax.swing.ImageIcon(bufferedResizedImage));
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Đã xảy ra lỗi khi đọc ảnh.", "Lỗi", JOptionPane.ERROR_MESSAGE);
                        ex.printStackTrace();
                    }
                } else {
                    JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Không tìm thấy ảnh.", "Thông Báo", JOptionPane.INFORMATION_MESSAGE);
                    lbImageBook.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/AddImage.png")));
                }
            }
        });


        ImageIcon webIcon =new javax.swing.ImageIcon(getClass().getResource("/Images/logo.png")); 
        setIconImage(webIcon.getImage());
        setTitle("Đơn nhập");
        setSize(200, 150);
        setLocationRelativeTo(null);
        setLocation(100, -30); // Đặt cửa sổ ở vị trí cụ thể (x, y)

        
        
        javax.swing.GroupLayout pnImageBookLayout = new javax.swing.GroupLayout(pnImageBook);
        pnImageBookLayout.setHorizontalGroup(
        	pnImageBookLayout.createParallelGroup(Alignment.TRAILING)
        		.addComponent(lbImageBook, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
        );
        pnImageBookLayout.setVerticalGroup(
        	pnImageBookLayout.createParallelGroup(Alignment.TRAILING)
        		.addComponent(lbImageBook, GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
        );
        pnImageBook.setLayout(pnImageBookLayout);

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel2.setText("Số lượng");

        btnLuuThongTin.setForeground(new java.awt.Color(44, 137, 247));
        btnLuuThongTin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/action-save-white.png"))); // NOI18N
        btnLuuThongTin.setText("Lưu thông tin");
        btnLuuThongTin.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnLuuThongTin.setPreferredSize(new java.awt.Dimension(177, 36));

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel4.setText("Giá");

        jLabel5.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel5.setText("Thể loại");

        jLabel6.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel6.setText("NXB");

        jLabel7.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel7.setText("Tác giả");

        jLabel8.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel8.setText("Tên sách");
        
        cbSach.setBackground(new java.awt.Color(246, 250, 255));
        cbSach.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        for(Book item : bookList)
        {
        	cbSach.addItem(item.getName());
        }
        cbSach.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(229, 229, 229)));
        cbSach.setOpaque(true);
        bookAuthorDao = new BookAuthorDAO(null); // Khởi tạo đối tượng BookAuthorDao
        bookCategoryDao = new BookCategoryDAO(null);
        publisherDao = new PublisherDAO(null);
        editionDao = new BookCategoryDAO(null);
        isbnDao = new BookDAO(null);
        cbSach.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				String selectedValue = String.valueOf(cbSach.getSelectedItem());
                if (selectedValue != null) {
					String img = null, isbn = null, edition = null, cost = null, tacgia = null, theloai = null, nxb = null;
					
					try {
						img = supplyCard.getByImg(selectedValue);
						isbn = supplyCard.getByISBN(selectedValue);
						edition = supplyCard.getByEdition(selectedValue);
						cost = String.valueOf(supplyCard.getByCost(selectedValue));
						tacgia = author.getByName(isbn);
						theloai = category.getByName(isbn);
						nxb = publisher.getByIDPubName(isbn);
                        List<String> authors = bookAuthorDao.getAuthorsForBook(selectedValue);  // Gọi phương thức từ BookAuthorDao
                        DefaultComboBoxModel<String> authorModel = new DefaultComboBoxModel<>();
                     // Khởi tạo một HashSet để lưu trữ các tên tác giả đã được thêm vào JComboBox
                        HashSet<String> addedAuthors = new HashSet<>();
                     // Sau đó, trong phần xử lý sự kiện chọn sách, bạn kiểm tra tên tác giả trước khi thêm vào JComboBox
                     for (String author : authors) {
                         // Kiểm tra xem tên tác giả đã được thêm vào JComboBox chưa
                         if (!addedAuthors.contains(author)) {
                             // Nếu chưa, thêm vào JComboBox và cập nhật HashSet
                             authorModel.addElement(author);
                             addedAuthors.add(author);
                         }
                     }
                        cbTacGia.setModel(authorModel);
                        
                       //Tự động điền thể loại
                        List<String> categories = bookCategoryDao.getCategoriesForBook(selectedValue);  // Gọi phương thức từ BookAuthorDao
                        
                        // Khởi tạo một HashSet để lưu trữ các thể loại đã được thêm vào JComboBox
                        HashSet<String> addedCategories = new HashSet<>();

                        // Thêm các thể loại vào JComboBox
                        DefaultComboBoxModel<String> categoryModel = new DefaultComboBoxModel<>();
                        for (String category : categories) {
                            // Kiểm tra xem thể loại đã được thêm vào JComboBox chưa
                            if (!addedCategories.contains(category)) {
                                // Nếu chưa, thêm vào JComboBox và cập nhật HashSet
                                categoryModel.addElement(category);
                                addedCategories.add(category);
                            }
                        }

                        // Gán mô hình thể loại mới cho JComboBox
                        cbTheLoai.setModel(categoryModel);
                        
                        //Tự động điền nhà xuất bản
                        List<String> publishers = publisherDao.getPublisherForBook(selectedValue);  // Gọi phương thức từ BookAuthorDao
                        
                        // Khởi tạo một HashSet để lưu trữ các nhà xuất bản đã được thêm vào JComboBox
                        HashSet<String> addedPublishers = new HashSet<>();

                        // Thêm các nhà xuất bản vào JComboBox
                        DefaultComboBoxModel<String> publisherModel = new DefaultComboBoxModel<>();
                        for (String publisher : publishers) {
                            // Kiểm tra xem nhà xuất bản đã được thêm vào JComboBox chưa
                            if (!addedPublishers.contains(publisher)) {
                                // Nếu chưa, thêm vào JComboBox và cập nhật HashSet
                                publisherModel.addElement(publisher);
                                addedPublishers.add(publisher);
                            }
                        }

                        // Gán mô hình nhà xuất bản mới cho JComboBox
                        cbNXB.setModel(publisherModel);
                        
                        
                     // Tự động điền phiên bản
                        List<String> editions = editionDao.getEditionsForBook(selectedValue);  // Gọi phương thức từ editionDao

                        // Khởi tạo một HashSet để lưu trữ các phiên bản đã được thêm vào JComboBox
                        HashSet<String> addedEditions = new HashSet<>();

                        // Khởi tạo DefaultComboBoxModel
                        DefaultComboBoxModel<String> editionModel = new DefaultComboBoxModel<>();

                        // Thêm các phiên bản vào JComboBox
                        for (String edition1 : editions) {
                            if (!addedEditions.contains(edition1)) {
                                editionModel.addElement(edition1);
                                addedEditions.add(edition1);
                            }
                        }

                        // Gán mô hình phiên bản mới cho JComboBox
                        cbEdition.setModel(editionModel);
                        
						
					} catch (SQLException e2) {
						// TODO Auto-generated catch block
						e2.printStackTrace();
					} catch (IOException e2) {
						// TODO Auto-generated catch block
						e2.printStackTrace();
					}
					    File imageFile = new File(img);
					    if (imageFile.exists() && imageFile.canRead()) {
					        try {
					            BufferedImage image = ImageIO.read(imageFile);
					            if (img != null && isbn!=null) {
					                // Kích thước mới (ví dụ: 200x200)
					                int newWidth = 190;
					                int newHeight = 190;
	
					                // Tạo ảnh mới với kích thước đã chỉ định
					                Image resizedImage = image.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
					                BufferedImage bufferedResizedImage = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_INT_RGB);
					                bufferedResizedImage.getGraphics().drawImage(resizedImage, 0, 0, null);
	
					                // Gán ảnh đã thay đổi kích thước vào JLabel
					                lbImageBook.setIcon(new javax.swing.ImageIcon(bufferedResizedImage));
			                        txtISBN.setText(isbn);
			                        txtGia.setText(cost);
			                        txtISBN.setEditable(false);
			                        if(tacgia == null)
			                        {
			                        	JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Tác phẩm này bị thiếu phần tác giả","Thông báo", JOptionPane.INFORMATION_MESSAGE);
			                        }else {
			                        	addToComboBoxCheckTg(tacgia);
					                    cbTacGia.setSelectedItem(tacgia);
					                    cbTacGia.setEnabled(false);
			                        }
			                        if(theloai == null)
			                        {
			                        	JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Tác phẩm này bị thiếu phần thể loại","Thông báo", JOptionPane.INFORMATION_MESSAGE);
			                        }else {
			                        	addToComboBoxCheckTl(theloai);
					                    cbTheLoai.setSelectedItem(theloai);
					                    cbTheLoai.setEnabled(false);
			                        }
			                        if(edition == null)
			                        {
			                        	JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Tác phẩm này bị thiếu phần phiên bản","Thông báo", JOptionPane.INFORMATION_MESSAGE);
			                        }else {
			                        	addToComboBoxCheckTl(edition);
					                    cbEdition.setSelectedItem(edition);
					                    cbEdition.setEnabled(false);
			                        }
	 
			                        cbNXB.setSelectedItem(nxb);
			                        cbNXB.setEnabled(false);
//			                        txtISBN.setEditable(false);
//			                        lblicon_img.setEnabled(false);
			                    }else {
			                    	JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Chưa có dữ liệu cho cuốn sách này!","Thông báo",JOptionPane.INFORMATION_MESSAGE);
			                    	cbTacGia.setEnabled(true);
			                    	cbTheLoai.setEnabled(true);
			                    	cbNXB.setEnabled(true);
			                    }
			                } catch (IOException e1) {
			                    System.out.println(e1);
			                    JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Không thể đọc tệp ảnh.", "Lỗi", JOptionPane.ERROR_MESSAGE);
			                }
					 }
                }
			}
		});
        JTextField txtISBNList = new JTextField(20); // Độ dài 20 ký tự, bạn có thể điều chỉnh tùy ý
        cbEdition.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedValue = String.valueOf(cbEdition.getSelectedItem());
                if (selectedValue != null) {
                    try {
                        // Lấy danh sách mã ISBN cho cuốn sách đã chọn từ cơ sở dữ liệu
                        List<String> isbns = isbnDao.getISBNForBook(selectedValue);

                        // Hiển thị danh sách mã ISBN trong JTextField
                        StringBuilder isbnList = new StringBuilder();
                        for (String isbn : isbns) {
                            isbnList.append(isbn).append(", "); // Thêm mã ISBN vào chuỗi với dấu phân cách
                        }
                        // Loại bỏ dấu phân cách ở cuối và đặt giá trị vào JTextField
                        txtISBN.setText(isbnList.toString().replaceAll(", $", ""));

                        
                    } catch (SQLException ex) {
                        ex.printStackTrace();
                    }
                }
            }
        });

        txtGia.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(229, 229, 229)));
        txtGia.setFont(new java.awt.Font("SansSerif", 1, 13));
        
     
        
        txtSoLuong.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(229, 229, 229)));
        txtSoLuong.setFont(new java.awt.Font("SansSerif", 1, 13));
        
        cbEdition.setBackground(new java.awt.Color(246, 250, 255));
        cbEdition.setFont(new java.awt.Font("SansSerif", 0, 14));
        cbEdition.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(229, 229, 229)));
        cbEdition.setOpaque(true);
        cbEdition.setPreferredSize(new java.awt.Dimension(77, 28));
        
        
        cbTacGia.setBackground(new java.awt.Color(246, 250, 255));
        cbTacGia.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
//        cbTacGia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tác giả" }));
//        for(Author item : authorList)
//        {
//        	cbTacGia.addItem(item.getName());
//        }
        cbTacGia.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(229, 229, 229)));
        cbTacGia.setOpaque(true);
        cbTacGia.setPreferredSize(new java.awt.Dimension(77, 28));
        lbThemTacGia.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbThemTacGia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/add.png"))); // NOI18N
        lbThemTacGia.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        lbThemTacGia.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		cbTacGia.setEditable(false);
        lbThemTacGia.addMouseListener(new MouseAdapter() {
        	public void mouseClicked(MouseEvent e)
        	{
        		if(e.getClickCount()==1 || e.getClickCount()==2)
        		{
        			WareHouseAddReader_Dialog r;
        			try {
        			    r = new WareHouseAddReader_Dialog(null,"warehouse", null,rootPaneCheckingEnabled);
        			    r.setVisible(true);
        			    
        			    // Thực hiện kiểm tra xem r đã đóng hay không
        			    if (r != null && !r.isVisible()) {
        			        // Dialog đã đóng, thực hiện các thao tác tiếp theo
        			        if(r.giatri()!=null && r.cbTgia.getSelectedIndex()!=0)
        			        {
        			        	addToComboBoxCheckTg(r.giatri());
        			        }
        			    }
        			} catch (ClassNotFoundException | SQLException | IOException e1) {
        			    e1.printStackTrace();
        			}
        		}
        	}
		});
        lbThemTacGia.setVisible(false);
        cbNXB.setBackground(new java.awt.Color(246, 250, 255));
        cbNXB.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
//		cbNXB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NXB" }));
//        for(Publisher item : publisherList)
//        {
//        	cbNXB.addItem(item.getName());
//        }
        
        cbNXB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(229, 229, 229)));
        cbNXB.setOpaque(true);
        cbNXB.setPreferredSize(new java.awt.Dimension(77, 28));
        cbNXB.setEditable(false);
        lbThemNXB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbThemNXB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/add.png"))); // NOI18N
        lbThemNXB.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        lbThemNXB.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        
        lbThemNXB.addMouseListener(new MouseAdapter() {
        	public void mouseClicked(MouseEvent e)
        	{
        		if(e.getClickCount()==1 || e.getClickCount()==2)
        		{
        			WareHouseAddNXB_Dialog r;
                    try {
                        r = new WareHouseAddNXB_Dialog(null,"warehouse",null, rootPaneCheckingEnabled);
                        r.setVisible(true);
                        cbNXB.removeAllItems();
                        for(Publisher item : publisherList)
                        {
                        	cbNXB.addItem(item.getName());
                        }
                        cbNXB.addItem(r.txtNhaXuatBan.getText());
                    } catch (ClassNotFoundException | SQLException | IOException e1) {
                        // TODO Auto-generated catch block
                        e1.printStackTrace();
                    }

        			
        		}
        	}
		});
        lbThemNXB.setVisible(false);
        
        cbTheLoai.setBackground(new java.awt.Color(246, 250, 255));
        cbTheLoai.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
//        cbTheLoai.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Thể loại" }));
//        for(Category item : categoryList)
//        {
//        	cbTheLoai.addItem(item.getName());
//        }
        cbTheLoai.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(229, 229, 229)));
        cbTheLoai.setOpaque(true);
        cbTheLoai.setPreferredSize(new java.awt.Dimension(77, 28));

        lbThemTheLoai.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbThemTheLoai.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/add.png"))); // NOI18N
        lbThemTheLoai.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        lbThemTheLoai.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        
        lbThemTheLoai.addMouseListener(new MouseAdapter() {
        	public void mouseClicked(MouseEvent e)
        	{
        		if(e.getClickCount()==1 || e.getClickCount()==2)
        		{
        			WareHouseAddTypeBook_Dialog r;
        			try {
        			    r = new WareHouseAddTypeBook_Dialog(null,"warehouse",null, rootPaneCheckingEnabled);
        			    r.setVisible(true);
        			    
        			    // Thực hiện kiểm tra xem r đã đóng hay không
        			    if (r != null && !r.isVisible()) {
        			        // Dialog đã đóng, thực hiện các thao tác tiếp theo
        			        if(r.giatri()!=null && r.cbCategory.getSelectedIndex()!=0)
        			        {
        			        	addToComboBoxCheckTl(r.giatri());
        			        }
        			    }
        			} catch (ClassNotFoundException | SQLException | IOException e1) {
        			    e1.printStackTrace();
        			}

        			
        		}
        	}
		});
        lbThemTheLoai.setVisible(false);
        
        jLabel8_1.setText("Edition");
        jLabel8_1.setFont(new java.awt.Font("SansSerif", 1, 13));
        
        jLabel8_2.setText("ISBN");
        jLabel8_2.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        
        txtISBN.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(229, 229, 229)));
        txtISBN.setFont(new java.awt.Font("SansSerif", 1, 13));
        
        // GÕ ENTER KIỂM TRA TEXT ISBN
        txtISBN.addKeyListener(new KeyListener() {
			
			@Override
			public void keyTyped(KeyEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void keyReleased(KeyEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void keyPressed(KeyEvent e) {
				// TODO Auto-generated method stub
				final String isbn = txtISBN.getText();
				try {
					if(e.getKeyCode()==KeyEvent.VK_ENTER)
					{
						String img = supplyCard.getByImgFromISBN(isbn);
						String book = supplyCard.getNameBook(isbn);
						String cost = String.valueOf(supplyCard.getByCostFromISBN(isbn));
						String tacgia = author.getByName(isbn);
						String theloai = category.getByName(isbn);
						String nxb = publisher.getByIDPubName(isbn);
						if(isAlpha(isbn))
						{
							JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Nội dung là số không phải là chữ!","Cảnh Báo",JOptionPane.WARNING_MESSAGE);
						}
				        if(isbn.isEmpty())
				        {
				        	JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "ISBN không được bỏ trống", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
				        }
						else
						{
						    File imageFile = new File(img);
						    if (imageFile.exists() && imageFile.canRead()) {
						        try { 	
						            BufferedImage image = ImageIO.read(imageFile);
						            if (img != null && isbn!=null) {
						                // Kích thước mới (ví dụ: 200x200)
						                int newWidth = 190;
						                int newHeight = 190;
		
						                // Tạo ảnh mới với kích thước đã chỉ định
						                Image resizedImage = image.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
						                BufferedImage bufferedResizedImage = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_INT_RGB);
						                bufferedResizedImage.getGraphics().drawImage(resizedImage, 0, 0, null);
		
						                // Gán ảnh đã thay đổi kích thước vào JLabel
						                lbImageBook.setIcon(new javax.swing.ImageIcon(bufferedResizedImage));
				                        txtISBN.setText(isbn);
				                        txtGia.setText(cost);
				                        txtISBN.setEditable(false);
				                        if(tacgia == null)
				                        {
				                        	JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Tác phẩm này bị thiếu phần tác giả","Thông báo", JOptionPane.INFORMATION_MESSAGE);
				                        }else {
				                        	addToComboBoxCheckTg(tacgia);
						                    cbTacGia.setSelectedItem(tacgia);
						                    cbTacGia.setEnabled(false);
				                        }
				                        if(edition == null)
				                        {
				                        	JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Tác phẩm này bị thiếu phần phiên bản","Thông báo", JOptionPane.INFORMATION_MESSAGE);
				                        }else {
				                        	addToComboBoxCheckTg(edition);
						                    cbEdition.setSelectedItem(edition);
						                    cbEdition.setEnabled(false);
				                        }
				                        if(theloai == null)
				                        {
				                        	JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Tác phẩm này bị thiếu phần thể loại","Thông báo", JOptionPane.INFORMATION_MESSAGE);
				                        }else {
				                        	addToComboBoxCheckTl(theloai);
						                    cbTheLoai.setSelectedItem(theloai);
						                    cbTheLoai.setEnabled(false);
				                        }
		 
				                        cbNXB.setSelectedItem(nxb);
				                        cbNXB.setEnabled(false);
//				                        txtISBN.setEditable(false);
//				                        lblicon_img.setEnabled(false);
				                    }else {
				                    	JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Chưa có dữ liệu cho cuốn sách này!","Thông báo",JOptionPane.INFORMATION_MESSAGE);
				                    	cbTacGia.setEnabled(true);
				                    	cbTheLoai.setEnabled(true);
				                    	cbNXB.setEnabled(true);
				                    }
				                } catch (IOException e1) {
				                    System.out.println(e1);
				                    JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Không thể đọc tệp ảnh.", "Lỗi", JOptionPane.ERROR_MESSAGE);
				                }
						 }
//					        else {
//					            JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Tệp ảnh không tồn tại.", "Lỗi", JOptionPane.ERROR_MESSAGE);
//					        }
						}
//						else {
//							JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Nội dung không thể chứa cả chữ và số. ","Cảnh Báo",JOptionPane.WARNING_MESSAGE);
//						}
					}
				} catch (HeadlessException e1) {
					// TODO Auto-generated catch block
					System.out.println(e1);
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					System.out.println(e1);
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					System.out.println(e1);
				}
			}
		});
        
              
        
        javax.swing.GroupLayout panelBorder2Layout = new javax.swing.GroupLayout(panelBorder2);
        panelBorder2Layout.setHorizontalGroup(
        	panelBorder2Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(panelBorder2Layout.createSequentialGroup()
        			.addGroup(panelBorder2Layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(panelBorder2Layout.createSequentialGroup()
        					.addContainerGap()
        					.addGroup(panelBorder2Layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(panelBorder2Layout.createSequentialGroup()
        							.addGroup(panelBorder2Layout.createParallelGroup(Alignment.LEADING)
        								.addComponent(jLabel2)
        								.addComponent(jLabel4)
        								.addComponent(jLabel5))
        							.addGap(16)
        							.addGroup(panelBorder2Layout.createParallelGroup(Alignment.TRAILING)
        								.addComponent(txtGia, GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
        								.addComponent(txtSoLuong, GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
        								.addGroup(panelBorder2Layout.createSequentialGroup()
        									.addComponent(cbTheLoai, 0, 149, Short.MAX_VALUE)
        									.addPreferredGap(ComponentPlacement.RELATED)
        									.addComponent(lbThemTheLoai, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE))))
        						.addGroup(panelBorder2Layout.createSequentialGroup()
        							.addGroup(panelBorder2Layout.createParallelGroup(Alignment.LEADING)
        								.addComponent(jLabel6)
        								.addComponent(jLabel8)
        								.addComponent(jLabel7))
        							.addGap(18)
        							.addGroup(panelBorder2Layout.createParallelGroup(Alignment.LEADING)
        								.addGroup(panelBorder2Layout.createSequentialGroup()
        									.addGroup(panelBorder2Layout.createParallelGroup(Alignment.TRAILING, false)
        										.addComponent(cbTacGia, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        										.addComponent(cbNXB, 0, 149, Short.MAX_VALUE))
        									.addPreferredGap(ComponentPlacement.RELATED)
        									.addGroup(panelBorder2Layout.createParallelGroup(Alignment.LEADING)
        										.addComponent(lbThemTacGia, GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
        										.addComponent(lbThemNXB, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)))
        								.addComponent(cbSach, 0, 188, Short.MAX_VALUE)))
        						.addGroup(panelBorder2Layout.createSequentialGroup()
        							.addComponent(jLabel8_1, GroupLayout.PREFERRED_SIZE, 56, GroupLayout.PREFERRED_SIZE)
        							.addGap(18)
        							.addComponent(cbEdition, GroupLayout.PREFERRED_SIZE, 205, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.RELATED, 112, Short.MAX_VALUE))
        						.addGroup(panelBorder2Layout.createSequentialGroup()
        							.addComponent(jLabel8_2, GroupLayout.PREFERRED_SIZE, 56, GroupLayout.PREFERRED_SIZE)
        							.addGap(18)
        							.addGroup(panelBorder2Layout.createParallelGroup(Alignment.LEADING)
        								.addComponent(pnImageBook, GroupLayout.PREFERRED_SIZE, 174, GroupLayout.PREFERRED_SIZE)
        								.addComponent(txtISBN, GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE))))
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addGroup(panelBorder2Layout.createParallelGroup(Alignment.TRAILING)
        						.addComponent(btnXoaTgia, GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
        						.addComponent(btnXoaTL, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
        						.addComponent(btnThemSach, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        				.addGroup(panelBorder2Layout.createSequentialGroup()
        					.addGap(25)
        					.addComponent(btnLuuThongTin, GroupLayout.PREFERRED_SIZE, 274, GroupLayout.PREFERRED_SIZE)))
        			.addContainerGap())
        );
        panelBorder2Layout.setVerticalGroup(
        	panelBorder2Layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(panelBorder2Layout.createSequentialGroup()
        			.addGap(14)
        			.addComponent(pnImageBook, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addGap(18)
        			.addGroup(panelBorder2Layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(panelBorder2Layout.createSequentialGroup()
        					.addGap(18)
        					.addGroup(panelBorder2Layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(txtISBN, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE)
        						.addComponent(jLabel8_2, GroupLayout.PREFERRED_SIZE, 18, GroupLayout.PREFERRED_SIZE))
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addGroup(panelBorder2Layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(jLabel8_1, GroupLayout.PREFERRED_SIZE, 18, GroupLayout.PREFERRED_SIZE)
        						.addComponent(cbEdition, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
        				.addGroup(panelBorder2Layout.createSequentialGroup()
        					.addGap(102)
        					.addGroup(panelBorder2Layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(jLabel8)
        						.addComponent(btnThemSach, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
        						.addComponent(cbSach, GroupLayout.PREFERRED_SIZE, 29, GroupLayout.PREFERRED_SIZE))))
        			.addPreferredGap(ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
        			.addGroup(panelBorder2Layout.createParallelGroup(Alignment.TRAILING)
        				.addGroup(panelBorder2Layout.createSequentialGroup()
        					.addGap(36)
        					.addGroup(panelBorder2Layout.createParallelGroup(Alignment.TRAILING)
        						.addGroup(panelBorder2Layout.createParallelGroup(Alignment.BASELINE)
        							.addComponent(cbNXB, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        							.addComponent(jLabel6))
        						.addComponent(lbThemNXB, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE))
        					.addGap(18)
        					.addGroup(panelBorder2Layout.createParallelGroup(Alignment.TRAILING)
        						.addComponent(lbThemTheLoai, GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
        						.addGroup(panelBorder2Layout.createParallelGroup(Alignment.BASELINE)
        							.addComponent(cbTheLoai, GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
        							.addComponent(jLabel5))))
        				.addGroup(panelBorder2Layout.createSequentialGroup()
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(btnXoaTL, GroupLayout.PREFERRED_SIZE, 29, GroupLayout.PREFERRED_SIZE)))
        			.addGap(13)
        			.addGroup(panelBorder2Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(txtGia, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jLabel4))
        			.addGap(18)
        			.addGroup(panelBorder2Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(txtSoLuong, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jLabel2))
        			.addGap(47)
        			.addComponent(btnLuuThongTin, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addGap(30))
        		.addGroup(panelBorder2Layout.createSequentialGroup()
        			.addContainerGap(370, Short.MAX_VALUE)
        			.addGroup(panelBorder2Layout.createParallelGroup(Alignment.TRAILING, false)
        				.addComponent(btnXoaTgia, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        				.addGroup(panelBorder2Layout.createParallelGroup(Alignment.BASELINE)
        					.addComponent(cbTacGia, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        					.addComponent(jLabel7))
        				.addComponent(lbThemTacGia, GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
        			.addGap(289))
        );
        panelBorder2.setLayout(panelBorder2Layout);

        jLabel9.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(127, 127, 127));
        jLabel9.setText("Sách được nhập");

        spTable.setBorder(null);
//        final DefaultTableModel model = (DefaultTableModel) tbSachDuocNhap.getModel();
        tbSachDuocNhap.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "ISBN", "Tên sách", "Tác giả", "Tái Bản", "NXB", "Thể loại", "Giá", "Số lượng"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spTable.setViewportView(tbSachDuocNhap);
        
        //ACTION LƯU THÔNG TIN VÀ KIỂM TRA TEXT SỐ LƯỢNG
        
        btnLuuThongTin.addActionListener(new ActionListener() {
			
			@Override
			
			public void actionPerformed(ActionEvent e) {
			    // TODO: Kiểm tra các trường nhập liệu trước khi thêm vào bảng
				int errorCount = 0;
			    gia = txtGia.getText();
			    soluong = txtSoLuong.getText();
			    isbn = txtISBN.getText();

			    if ( isComboBoxEmpty(cbSach) || isTextFieldEmpty(txtGia) || isTextFieldEmpty(txtSoLuong) || isComboBoxEmpty(cbTacGia) || isComboBoxEmpty(cbNXB) || isComboBoxEmpty(cbTheLoai) || isComboBoxEmpty(cbNhaCungCap)||isComboBoxEmpty(cbEdition)) {
			        JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Vui lòng kiểm tra đầy đủ thông tin.", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
			        errorCount++;
			    } else {
			        // Kiểm tra số lượng > 0
			        if (Integer.parseInt(soluong) <= 0) {
			            JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Số lượng phải lớn hơn 0.", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
			            errorCount++;
			        } 
			        // Kiểm tra giá > 19000
			        else if (Integer.parseInt(gia) <= 19000) {
			            JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Giá phải lớn hơn 19000.", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
			            errorCount++;
			        } 
			        // Nếu các điều kiện đều đúng, thêm dữ liệu vào bảng
			        else {
			        	errorCount = 0;
			        	DefaultTableModel model = (DefaultTableModel) tbSachDuocNhap.getModel();
			            tensach = String.valueOf(cbSach.getSelectedItem());
			            tgia = String.valueOf(cbTacGia.getSelectedItem());
			            edition = String.valueOf(cbEdition.getSelectedItem());
			            nxb = String.valueOf(cbNXB.getSelectedItem());
			            theloai = String.valueOf(cbTheLoai.getSelectedItem());
			            ncc = String.valueOf(cbNhaCungCap.getSelectedItem());
			            String[] rowData = {Integer.toString(model.getRowCount() + 1), isbn, tensach, tgia, edition, nxb, theloai, gia, soluong, anh};
			            model.addRow(rowData);
			            tongchi = tongchi + (Integer.parseInt(gia) * Integer.parseInt(soluong));
			            tongsoluong = tongsoluong + (Integer.parseInt(soluong));
			            txtTongChi.setText(String.valueOf(tongchi+"đ"));
			            lbImageBook.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/AddImage.png")));
			            txtISBN.setText("");
			            txtGia.setText("");
			            txtSoLuong.setText("");
			            txtISBN.setEditable(true);
			            cbTacGia.setEnabled(true);
			            cbTheLoai.setEnabled(true);
			            cbNXB.setEnabled(true);
			        }
			    }
			    if (errorCount > 1) {
			        errorCount = 0; // Đặt lại biến đếm lỗi
			    }
			}
        });
        
        //ACTION XỬ LÝ XÓA TRONG JTABLE
        final JPopupMenu popupMenu = new JPopupMenu();
        JMenuItem menuItemXoa = new JMenuItem("Xóa");
        JMenuItem menuItemNhap = new JMenuItem("Nhập thêm sách");
        menuItemXoa.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				int dialogResult = JOptionPane.showConfirmDialog(JOptionPane.getRootFrame(), "Bạn có chắc là muốn xóa không?","Xác nhận",JOptionPane.YES_NO_OPTION);
				if(dialogResult == JOptionPane.YES_OPTION)
				{
					DefaultTableModel model = (DefaultTableModel) tbSachDuocNhap.getModel();
					int selectedRow = tbSachDuocNhap.getSelectedRow();
					if(selectedRow >= 0)
					{
						Object value = tbSachDuocNhap.getValueAt(selectedRow, 7);
						Object value1 = tbSachDuocNhap.getValueAt(selectedRow, 8);
						if(value !=null && value1 !=null)
						{
							gia = value.toString();
							soluong = value1.toString();
							tongchi = tongchi - (Integer.parseInt(gia)*Integer.parseInt(soluong));
							txtTongChi.setText(String.valueOf(tongchi));
							tongsoluong = tongsoluong - (Integer.parseInt(soluong));
						}
						model.removeRow(selectedRow);
						 // Cập nhật lại giá trị "STT" cho tất cả các dòng còn lại
				        for (int i = 0; i < model.getRowCount(); i++) {
				            model.setValueAt(i + 1, i, 0); // Cập nhật cột "STT" (cột 0)
				        }
					}
					txtGia.setEditable(true);
					txtSoLuong.setEditable(true);
					txtISBN.setEditable(true);
					cbNXB.setEnabled(true);
					cbSach.setEnabled(true);
					cbEdition.setEnabled(true);
					cbTacGia.setEnabled(true);
					cbTheLoai.setEnabled(true);
					cbNhaCungCap.setEnabled(true);
					cbSach.setEnabled(true);
					txtGia.setText("");
					txtSoLuong.setText("");
					txtISBN.setText("");
				}
			}
		});
        
        menuItemNhap.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				cbSach.setEnabled(true);
				txtGia.setEditable(true);
				txtSoLuong.setEditable(true);
				txtISBN.setEditable(true);
				cbNXB.setEnabled(true);
				cbNhaCungCap.setEnabled(true);
				cbTacGia.setEnabled(true);
				cbTheLoai.setEnabled(true);
				cbEdition.setEnabled(true);
				txtGia.setText("");
				txtSoLuong.setText("");
				txtISBN.setText("");
			}
		});
        
        popupMenu.add(menuItemXoa);
        popupMenu.add(menuItemNhap);
        tbSachDuocNhap.setComponentPopupMenu(popupMenu);
        
        tbSachDuocNhap.addMouseListener(new MouseAdapter() {
        	 public void mousePressed(MouseEvent e) {
                 if (SwingUtilities.isRightMouseButton(e)) {
                     int row = tbSachDuocNhap.rowAtPoint(e.getPoint());
                     tbSachDuocNhap.setRowSelectionInterval(row, row);
                 }
             }
		});
        
        tbSachDuocNhap.addMouseListener(new MouseAdapter() {
        	public void mouseClicked(MouseEvent e)
        	{
        		if(e.getClickCount() == 1 || e.getClickCount() == 2)
        		{
        			DefaultTableModel model = (DefaultTableModel) tbSachDuocNhap.getModel();
        			int seclectedRow = tbSachDuocNhap.getSelectedRow();
        			if(seclectedRow >= 0)
        			{
        				Object isbn = tbSachDuocNhap.getValueAt(seclectedRow, 1).toString();
        				Object sach = tbSachDuocNhap.getValueAt(seclectedRow, 2);
        				Object tg = tbSachDuocNhap.getValueAt(seclectedRow, 3);
        				Object ed = tbSachDuocNhap.getValueAt(seclectedRow, 4).toString();
        				Object nhaxuatban = tbSachDuocNhap.getValueAt(seclectedRow, 5);
        				Object tl = tbSachDuocNhap.getValueAt(seclectedRow, 6);
        				Object g = tbSachDuocNhap.getValueAt(seclectedRow, 7).toString();
        				Object sl = tbSachDuocNhap.getValueAt(seclectedRow, 8).toString();
        				if(sach!=null && tg!=null && nhaxuatban!=null && tl!=null && g!=null && sl!=null)
        				{      					
    			            txtGia.setText(String.valueOf(g));
    			            txtGia.setEditable(false);
    			            txtSoLuong.setText(String.valueOf(sl));
    			            txtSoLuong.setEditable(false);
        					txtISBN.setText(String.valueOf(isbn));
        					txtISBN.setEditable(false);
        					
        					cbSach.setSelectedItem(sach);
        					cbSach.setEnabled(false);
        					cbSach.setSelectedItem(ed);
        					cbSach.setEnabled(false);
        					cbTacGia.setSelectedItem(tg);
        					cbTacGia.setEnabled(false);
        					cbTheLoai.setSelectedItem(tl);
        					cbTheLoai.setEnabled(false);
        					cbNXB.setSelectedItem(nhaxuatban);
            				cbNXB.setEnabled(false);
            				cbNhaCungCap.setSelectedItem(ncc);
        					cbNhaCungCap.setEnabled(false);
        					
        						String img;
    							try {
    								img = supplyCard.getByImg(String.valueOf(sach));
    								File imageFile = new File(img);
    								if (imageFile.exists() && imageFile.canRead()) {
    									try {
    										BufferedImage imagebook = ImageIO.read(imageFile);
    										if (imagebook != null) {
    											int newWidth = 190;
    											int newHeight = 190;
    							
    											// Tạo ảnh mới với kích thước đã chỉ định
    											Image resizedImage = imagebook.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
    											BufferedImage bufferedResizedImage = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_INT_RGB);
    											bufferedResizedImage.getGraphics().drawImage(resizedImage, 0, 0, null);
    							
    											// Gán ảnh đã thay đổi kích thước vào JLabel
    											lbImageBook.setIcon(new javax.swing.ImageIcon(bufferedResizedImage));
    										}
    									} catch (IOException e1) {
    										JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Không thể đọc tệp ảnh.", "Lỗi", JOptionPane.ERROR_MESSAGE);
    									}
    								}
    							} catch (Exception ex) {
    								ex.printStackTrace();
    							}
						
//                                else {
//                                    JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Tệp ảnh không tồn tại hoặc không thể đọc.", "Lỗi", JOptionPane.ERROR_MESSAGE);
//                                }
                            // } catch (SQLException e1) {
                            //     // TODO Auto-generated catch block
                            //     e1.printStackTrace();
                            // } catch (IOException e1) {
                            //     // TODO Auto-generated catch block
                            //     e1.printStackTrace();
                            // }
    						
        				}
        			}
        		}
        	}
		});
        
        javax.swing.GroupLayout panelBorder1Layout = new javax.swing.GroupLayout(panelBorder1);
        panelBorder1Layout.setHorizontalGroup(
        	panelBorder1Layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(Alignment.LEADING, panelBorder1Layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(panelBorder1Layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(spTable, GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
        				.addComponent(jLabel9))
        			.addContainerGap())
        );
        panelBorder1Layout.setVerticalGroup(
        	panelBorder1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(panelBorder1Layout.createSequentialGroup()
        			.addGap(23)
        			.addComponent(jLabel9)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(spTable, GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
        			.addContainerGap())
        );
        panelBorder1.setLayout(panelBorder1Layout);

        jLabel10.setForeground(new java.awt.Color(51, 51, 51));
        jLabel10.setText("Nhà cung cấp");

        cbNhaCungCap.setBackground(new java.awt.Color(246, 250, 255));
        cbNhaCungCap.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
//        cbNhaCungCap.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nhà cung cấp" }));
        for(Supplier item : supplierList)
        {
        	cbNhaCungCap.addItem(item.getSupplier_name());
        }
        cbNhaCungCap.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(229, 229, 229)));
        cbNhaCungCap.setOpaque(true);
        cbNhaCungCap.setPreferredSize(new java.awt.Dimension(77, 28));

        lbThemNhaCungCap.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbThemNhaCungCap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/add.png"))); // NOI18N
        lbThemNhaCungCap.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        lbThemNhaCungCap.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        
        lbThemNhaCungCap.addMouseListener(new MouseAdapter() {
        	public void mouseClicked(MouseEvent e)
        	{
        		if(e.getClickCount()==1 || e.getClickCount()==2)
        		{
        			WareHouseAddNCC_Dialog r;
                    try {
                        r = new WareHouseAddNCC_Dialog(null,"warehouse",null ,rootPaneCheckingEnabled);
                        r.setVisible(true);
                        cbNhaCungCap.addItem(r.txtNhaCungCap.getText());
                    } catch (ClassNotFoundException | SQLException | IOException e1) {
                        // TODO Auto-generated catch block
                        e1.printStackTrace();
                    }
        			
        		}
        	}
		});
        lbThemNhaCungCap.setVisible(false);
        
        btnThemSach.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				WareHouseAddSach_Dialog r;
                try {
                    r = new WareHouseAddSach_Dialog(null,"warehouse",rootPaneCheckingEnabled);
                    r.setVisible(true);
                    cbSach.addItem(r.txtTenSach.getText());
                } catch (ClassNotFoundException | SQLException | IOException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }
			}
		});
        btnThemSach.setVisible(false);
        
        btnXoaTgia.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedIndex = cbTacGia.getSelectedIndex();
                if (selectedIndex != -1) {
                    cbTacGia.removeItemAt(selectedIndex);
                } else {
                    JOptionPane.showMessageDialog(null, "Vui lòng chọn một mục để xóa!", "Thông báo", JOptionPane.WARNING_MESSAGE);
                }
            }
        });
        btnXoaTgia.setVisible(false);
        
        btnXoaTL.addActionListener(new ActionListener() {
			
			@Override
            public void actionPerformed(ActionEvent e) {
                int selectedIndex = cbTheLoai.getSelectedIndex();
                if (selectedIndex != -1) {
                    cbTheLoai.removeItemAt(selectedIndex);
                } else {
                    JOptionPane.showMessageDialog(null, "Vui lòng chọn một mục để xóa!", "Thông báo", JOptionPane.WARNING_MESSAGE);
                }
            }
		});
        btnXoaTL.setVisible(false);
        
        jLabel11.setForeground(new java.awt.Color(51, 51, 51));
        jLabel11.setText("Tổng chi");

        txtTongChi.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        txtTongChi.setText("0đ");

        btnXacNhan.setBackground(new java.awt.Color(22, 113, 221));
        btnXacNhan.setForeground(new java.awt.Color(255, 255, 255));
        btnXacNhan.setText("Xác nhận");
        btnXacNhan.setBorderColor(new java.awt.Color(22, 113, 221));
        btnXacNhan.setColor(new java.awt.Color(22, 113, 221));
        btnXacNhan.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        
        btnXacNhan.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				    // LƯU DỮ LIỆU VÀO DATABASE
		            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		            Date currentDate = new Date();
		            Timestamp timestamp = new Timestamp(currentDate.getTime());
		            
		            // KHỞI TẠO ĐỐI TƯỢNG
		            Book1 sach = new Book1();
		            Warehouse k = new Warehouse();
		            SupplyCardDetail d = new SupplyCardDetail();
		            BookAuthor ba = new BookAuthor();
		            BookCategory bc = new BookCategory();
		            Supplier sp = new Supplier();
		            
		            // TẠO 1 PHIẾU SUPPLYCARD
					ncc = cbNhaCungCap.getSelectedItem().toString();
					try {
						providerID = spB.getBySupplierID(ncc);
					} catch (SQLException | IOException e2) {
						// TODO Auto-generated catch block
						e2.printStackTrace();
					}
		            SupplyCard s = new SupplyCard();
	                s.setSupDate(timestamp);
	                s.setProvider(providerID);
	                s.setTongchi(tongchi);
                    try {
                        scB.saveSC(s);
                    } catch (SQLException | IOException e1) {
                        
                    }
	                
		            
	                int bookID,bookID2, scID, pubID,idBook, authorID, categoryID;
	                
				    try {
						for (int i = 0; i < tbSachDuocNhap.getRowCount(); i++) {
						    isbn = tbSachDuocNhap.getValueAt(i, 1).toString();
						    tensach = tbSachDuocNhap.getValueAt(i, 2).toString();
						    tgia = tbSachDuocNhap.getValueAt(i, 3).toString();
						    edition = tbSachDuocNhap.getValueAt(i, 4).toString();
						    nxb = tbSachDuocNhap.getValueAt(i, 5).toString();
						    theloai = tbSachDuocNhap.getValueAt(i, 6).toString();
						    gia = tbSachDuocNhap.getValueAt(i, 7).toString();
						    soluong = tbSachDuocNhap.getValueAt(i, 8).toString();
						    bookID = supplyCard.getByNameBook(tensach);
						    idBook = supplyCard.getByIDBook();
						    scID = supplyCard.getByID();
						    pubID = supplyCard.getByPublisherID(nxb);
						    authorID = author.getByAuthorID(tgia);
						    categoryID = category.getByCategoryID(theloai);
						    if (bookID == 0) {
						      // TRƯỜNG HỢP SÁCH MỚI
						    	
						      	//Thêm vào cp_book
						      k.setIsbn(isbn);
						      k.setBookID(idBook);
						      k.setStoreNum(Integer.parseInt(soluong));
						      k.setEdition(edition);
						      k.setPublisherID(pubID);
						      k.setCost(Long.parseLong(gia));
						      k.setImg(String.valueOf(tbSachDuocNhap.getValueAt(i, 9).toString()));
						      cB.savecpB(k);
						      	
						      	//Thêm vào Chi Tiết Đơn Nhập
					          d.setScID(scID);
						      d.setISBN(isbn);
						      d.setNum(Integer.parseInt(soluong));
						      dscB.saveDSC(d);
						      	
						      	//Thêm vào Book_Author
						      ba.setAuthorID(authorID);
						      ba.setISBN(isbn);
						      author.saveBookAuthor(ba);
						      
						      	//Thêm vào Book_Category
						      bc.setCategoryID(categoryID);
						      bc.setISBN(isbn);
						      category.saveBookCategory(bc);
						      
						    } else {
						      // TRƯỜNG HỢP SÁCH CŨ
						      k.setStoreNum(Integer.parseInt(soluong));
						      k.setEdition(edition);
						      k.setPublisherID(pubID);
						      k.setCost(Long.parseLong(gia));
						      k.setIsbn(isbn);
						      cB.saveOldBook(k);

						      d.setScID(scID);
						      d.setISBN(isbn);
						      d.setNum(Integer.parseInt(soluong));
						      dscB.saveDSC(d);

						      }
						  }
					    JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Thêm dữ liệu thành công.", "Thông Báo", JOptionPane.INFORMATION_MESSAGE);
					    tbSachDuocNhap.setRowCount(0);
					    tongchi = 0;
					    txtTongChi.setText(tongchi+"đ");
					    cbTacGia.removeAllItems();
					    cbTheLoai.removeAllItems();
					    cbEdition.removeAllItems();
					    txtGia.setText("");
						txtSoLuong.setText("");
						txtISBN.setText("");
					} catch (ClassNotFoundException | SQLException | IOException | NumberFormatException e1) {
						 boolean hasEmpty = hasEmptyCell(tbSachDuocNhap);
						 if(hasEmpty)
						 {
							 JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Bảng trống! Không thể thêm dữ liệu.", "Thông Báo", JOptionPane.ERROR_MESSAGE);
						 }else {
							 JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Thêm dữ liệu thất bại.", "Thông Báo", JOptionPane.ERROR_MESSAGE);
					         System.out.println(e1);
						 }
					}
				}
//			}
		});
        
        javax.swing.GroupLayout panelBorder_Basic1Layout = new javax.swing.GroupLayout(panelBorder_Basic1);
        panelBorder_Basic1Layout.setHorizontalGroup(
        	panelBorder_Basic1Layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(panelBorder_Basic1Layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(panelBorder2, GroupLayout.PREFERRED_SIZE, 330, Short.MAX_VALUE)
        			.addGap(18)
        			.addGroup(panelBorder_Basic1Layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(panelBorder1, GroupLayout.PREFERRED_SIZE, 640, GroupLayout.PREFERRED_SIZE)
        				.addGroup(panelBorder_Basic1Layout.createParallelGroup(Alignment.TRAILING, false)
        					.addGroup(panelBorder_Basic1Layout.createSequentialGroup()
        						.addGroup(panelBorder_Basic1Layout.createParallelGroup(Alignment.LEADING)
        							.addComponent(cbNhaCungCap, GroupLayout.PREFERRED_SIZE, 151, GroupLayout.PREFERRED_SIZE)
        							.addComponent(jLabel10))
        						.addPreferredGap(ComponentPlacement.RELATED)
        						.addComponent(lbThemNhaCungCap, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)
        						.addGap(461))
        					.addGroup(panelBorder_Basic1Layout.createSequentialGroup()
        						.addGroup(panelBorder_Basic1Layout.createParallelGroup(Alignment.LEADING)
        							.addComponent(txtTongChi)
        							.addComponent(jLabel11))
        						.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        						.addComponent(btnXacNhan, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
        						.addGap(26))))
        			.addGap(11))
        );
        panelBorder_Basic1Layout.setVerticalGroup(
        	panelBorder_Basic1Layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(panelBorder_Basic1Layout.createSequentialGroup()
        			.addGap(20)
        			.addGroup(panelBorder_Basic1Layout.createParallelGroup(Alignment.TRAILING)
        				.addComponent(panelBorder2, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 690, Short.MAX_VALUE)
        				.addGroup(panelBorder_Basic1Layout.createSequentialGroup()
        					.addComponent(panelBorder1, GroupLayout.PREFERRED_SIZE, 545, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
        					.addGroup(panelBorder_Basic1Layout.createParallelGroup(Alignment.TRAILING)
        						.addGroup(panelBorder_Basic1Layout.createSequentialGroup()
        							.addGroup(panelBorder_Basic1Layout.createParallelGroup(Alignment.TRAILING)
        								.addGroup(panelBorder_Basic1Layout.createSequentialGroup()
        									.addComponent(jLabel10)
        									.addPreferredGap(ComponentPlacement.RELATED)
        									.addComponent(cbNhaCungCap, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        								.addComponent(lbThemNhaCungCap, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE))
        							.addGap(23)
        							.addComponent(jLabel11)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(txtTongChi, GroupLayout.PREFERRED_SIZE, 29, GroupLayout.PREFERRED_SIZE))
        						.addComponent(btnXacNhan, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE))))
        			.addGap(31))
        );
        panelBorder_Basic1.setLayout(panelBorder_Basic1Layout);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/warehouse-white.png"))); // NOI18N
        jLabel3.setText("Đơn nhập");

        javax.swing.GroupLayout panelBorder_Statistic_Blue1Layout = new javax.swing.GroupLayout(panelBorder_Statistic_Blue1);
        panelBorder_Statistic_Blue1Layout.setHorizontalGroup(
        	panelBorder_Statistic_Blue1Layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(panelBorder_Statistic_Blue1Layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(panelBorder_Statistic_Blue1Layout.createParallelGroup(Alignment.TRAILING)
        				.addComponent(panelBorder_Basic1, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 1009, Short.MAX_VALUE)
        				.addComponent(jLabel3, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 1009, Short.MAX_VALUE))
        			.addContainerGap())
        );
        panelBorder_Statistic_Blue1Layout.setVerticalGroup(
        	panelBorder_Statistic_Blue1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(panelBorder_Statistic_Blue1Layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(jLabel3, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(panelBorder_Basic1, GroupLayout.PREFERRED_SIZE, 621, Short.MAX_VALUE)
        			.addContainerGap())
        );
        panelBorder_Statistic_Blue1.setLayout(panelBorder_Statistic_Blue1Layout);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addComponent(panelBorder_Statistic_Blue1, GroupLayout.DEFAULT_SIZE, 1029, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addComponent(panelBorder_Statistic_Blue1, GroupLayout.DEFAULT_SIZE, 805, Short.MAX_VALUE)
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //Actions
    public static boolean isNumeric(String str) {
        return str.matches("-?\\d+(\\.\\d+)?");
    }
    public static boolean isAlpha(String str) {
        return str.matches("[a-zA-Z]+");
    }
    public boolean isTextFieldEmpty(JTextField textField) {
        return textField.getText().trim().isEmpty();
    }
    private boolean isComboBoxEmpty(JComboBox<?> comboBox) {
        return comboBox.getSelectedItem() == null;
    }
    public void addToComboBoxCheckTg(String value) {
        boolean isDuplicate = false;

        for (int i = 0; i < cbTacGia.getItemCount(); i++) {
            String item = cbTacGia.getItemAt(i);
            if (item.equals(value)) {
                isDuplicate = true;
                break;
            }
        }

        if (!isDuplicate) {
            cbTacGia.addItem(value);
        }
    }
    public void addToComboBoxCheckTl(String value) {
        boolean isDuplicate = false;

        for (int i = 0; i < cbTheLoai.getItemCount(); i++) {
            String item = cbTheLoai.getItemAt(i);
            if (item.equals(value)) {
                isDuplicate = true;
                break;
            }
        }

        if (!isDuplicate) {
            cbTheLoai.addItem(value);
        }
    }
    public void addToComboBox(String value) {
        cbTacGia.addItem(value);
    }
//    public boolean addComboBox(String value) {
//        boolean isDuplicate = false;
//
//        for (int i = 0; i < cbTacGia.getItemCount(); i++) {
//            String item = cbTacGia.getItemAt(i);
//            if (item.equals(value)) {
//                isDuplicate = true;
//                break;
//            }
//        }
//
//        if (!isDuplicate) {
//            cbTacGia.addItem(value);
//            return true;
//        } else {
//            return false;
//        }
//    }
    public static boolean hasEmptyCell(JTable table) {
    	DefaultTableModel model = (DefaultTableModel) table.getModel();
        int rowCount = model.getRowCount();
        int colCount = model.getColumnCount();

        // Kiểm tra số lượng dòng và cột trong bảng
        if (rowCount == 0 || colCount == 0) {
            return true; // Nếu bảng không có dữ liệu, coi như bảng trống
        }

        // Duyệt qua từng ô trong bảng
        for (int row = 0; row < rowCount; row++) {
            for (int col = 0; col < colCount; col++) {
                Object value = model.getValueAt(row, col);
                if (value != null && !value.toString().isEmpty()) {
                    // Nếu có một ô có giá trị, coi như bảng không trống
                    return false;
                }
            }
        }

        // Nếu không tìm thấy ô có giá trị, coi như bảng trống
        return true;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WareHouseImportDialogg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WareHouseImportDialogg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WareHouseImportDialogg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WareHouseImportDialogg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        //</editor-fold>
        
        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    WareHouseImportDialogg dialog = new WareHouseImportDialogg(new javax.swing.JFrame(), true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                            System.exit(0);
                        }
                    });
                    dialog.setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(WareHouseImportDialogg.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(WareHouseImportDialogg.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(WareHouseImportDialogg.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    // Variables declaration - do not modify                     
    private MyDesign.MyButton btnLuuThongTin;
    private List<String> valueList;
    private JButton btnXoaTgia = new JButton("-");
    private JButton btnXoaTL = new JButton("-");
    protected MyDesign.MyButton btnXacNhan;
    public javax.swing.JComboBox<String> cbNXB;
    protected javax.swing.JComboBox<String> cbNhaCungCap;
    protected javax.swing.JComboBox<String> cbTacGia;
    protected javax.swing.JComboBox<String> cbTheLoai;
    protected javax.swing.JComboBox<String> cbSach;
    protected javax.swing.JComboBox<String> cbEdition;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel8_1;
    private javax.swing.JLabel jLabel8_2;
    private javax.swing.JLabel jLabel9;
    protected javax.swing.JLabel lbImageBook;
    protected javax.swing.JLabel lbThemNXB;
    protected javax.swing.JLabel lbThemNhaCungCap;
    protected javax.swing.JLabel lbThemTacGia;
    protected javax.swing.JLabel lbThemTheLoai;
    protected javax.swing.JLabel lbThemSach;
    private MyDesign.PanelBorder panelBorder1;
    private MyDesign.PanelBorder panelBorder2;
    private MyDesign.PanelBorder_Basic panelBorder_Basic1;
    private MyDesign.PanelBorder_Statistic_Blue panelBorder_Statistic_Blue1;
    private MyDesign.PanelBorder_Basic pnImageBook;
    private javax.swing.JScrollPane spTable;
    private MyDesign.MyTable tbSachDuocNhap;
    private BookAuthorDAO bookAuthorDao;
    private BookCategoryDAO bookCategoryDao;
    private PublisherDAO publisherDao;
    private BookCategoryDAO editionDao;
    private BookDAO isbnDao;
    protected MyDesign.MyTextField_Basic txtGia;
    protected MyDesign.MyTextField_Basic txtSoLuong;
    private javax.swing.JLabel txtTongChi;
    protected AuthorBUS author;
    private PublisherBUS publisher;
    protected CategoryBUS category;
    protected SupplyCardBUS supplyCard;
    protected DetailSupplyCardBUS detailSC;
    protected WarehouseBUS cpBook;
    protected long tongchi = 0;
    protected int tongsoluong =0;
    protected int providerID = 0;
    protected String gia, soluong;
    private String[] rowdata;
    protected String tensach;
    protected String tgia, nxb, ncc, theloai, edition, isbn, anh;
    protected Icon img;
    private Date supDate;
    protected MyDesign.MyTextField_Basic txtISBN;
    protected WarehouseBUS cB = new WarehouseBUS();
    protected SupplyCardBUS scB = new SupplyCardBUS() ;
    protected DetailSupplyCardBUS dscB = new DetailSupplyCardBUS() ;
    protected BookBUS bB = new BookBUS();
    protected SupplierBUS spB = new SupplierBUS();
    protected WareHouseScanner_Dialog whs;
    protected WareHouseAddReader_Dialog whr;
    protected JButton btnThemSach = new JButton("+");
}
